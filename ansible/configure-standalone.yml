---
- name: Wait for cloud-init
  hosts: all
  become: true
  become_user: root
  gather_facts: true
  pre_tasks:
    - name: Wait for ssh to come up
      ansible.builtin.wait_for:
        port: 22
        timeout: 300
        state: started
        search_regex: OpenSSH
      register: response
      until: response
      retries: 60
      delay: 5
    - name: Wait up to 30 minutes for cloud-init to finish
      community.general.cloud_init_data_facts:
        filter: status
      register: res
      until: "res.cloud_init_data_facts.status.v1.stage is defined and not res.cloud_init_data_facts.status.v1.stage"
      retries: 360
      delay: 5

- name: Main
  hosts: all
  gather_facts: true
  become: true
  become_user: root
  vars:
    jvb_region: "{{ cloud_region }}"
    java_use_11: true
    # add proxypass in nginx config for JVB colibri stats
    jitsi_meet_enable_colibri_websockets: true
    # disable colibri passthru to JVB IP
    jitsi_meet_colibri_proxy_enabled: false
    jvb_ws_domain: "{{ prosody_domain_name }}"
    # disable egress health in standalone
    egress_enable_health_cron: false
    tcpdump_prosody_jvb_enabled: false
  vars_files:
    - secrets/ssh-users.yml
    - secrets/ssl-certificates.yml
    - secrets/jibri.yml
    - secrets/jicofo.yml
    - secrets/jigasi.yml
    - secrets/asap-keys.yml
    - secrets/coturn.yml
    - secrets/jvb.yml
    - secrets/wavefront.yml
    - secrets/consul.yml
    - secrets/prosody.yml
    - secrets/prosody-egress-aws.yml
    - secrets/oci-logging.yml
    - secrets/repo.yml
    - secrets/carbon-black.yml
    - secrets/github-deploy.yml
    - config/vars.yml
    - sites/{{ hcv_environment }}/vars.yml

  pre_tasks:
    # fetch secrets from vault
    - name: Retrieve jigasi secrets from vault
      ansible.builtin.set_fact:
        jigasi_secret_response: "{{ lookup('community.hashi_vault.vault_kv2_get', hcv_environment+'/jigasi/xmpp') }}"
      no_log: true
      when: jigasi_vault_enabled
      tags: "provision"
    - name: Set jigasi variables from vault secrets
      ansible.builtin.set_fact:
        jigasi_auth_user: "{{ jigasi_secret_response.secret.user }}"
        jigasi_auth_password: "{{ jigasi_secret_response.secret.password }}"
      when:
        - jigasi_vault_enabled
        - jigasi_secret_response is defined
      no_log: true
      tags: "provision"

    - name: Remove Ansible repository
      ansible.builtin.apt_repository:
        repo: "ppa:ansible/ansible"
        state: absent
        update_cache: false
    - name: Remove OpenJDK repository
      ansible.builtin.apt_repository:
        repo: "ppa:openjdk-r/ppa"
        state: absent
        update_cache: false
    - name: Remove rsyslog apt repo
      ansible.builtin.apt_repository:
        repo: "ppa:adiscon/v8-stable"
        state: absent
        update_cache: false

    - name: Show JVB use public variable
      ansible.builtin.debug:
        var: jvb_use_public_ip
      tags: debug
    - name: Gather AWS facts
      amazon.aws.ec2_metadata_facts:
      tags: "provision"
      when: cloud_provider == 'aws'
    - name: Get instance's VNIC
      ansible.builtin.uri:
        url: http://169.254.169.254/opc/v1/vnics/
      register: vnic_result
      tags: "provision"
      when: cloud_provider == 'oracle'
    - name: Set JVB vnic fact
      ansible.builtin.set_fact:
        jvb_vnic: "{{ vnic_result.json[0].vnicId }}"
      tags: "provision"
      when: cloud_provider == 'oracle'
    - name: Get instance's details
      ansible.builtin.uri:
        url: http://169.254.169.254/opc/v1/instance/
      register: instance_result
      tags: "provision"
      when: cloud_provider == 'oracle'
    - name: Set instance shape facts
      ansible.builtin.set_fact:
        cloud_instance_id: "{{ instance_result.json.id }}"
        jvb_shape: "{{ instance_result.json.shape }}"
        cloud_availability_domain: "{{ instance_result.json.ociAdName }}"
        cloud_fault_domain: "{{ instance_result.json.faultDomain }}"
      tags: "provision"
      when: cloud_provider == 'oracle'
    - name: Get instance's Public IP from VNIC
      ansible.builtin.command: "oci network vnic get --vnic-id {{ jvb_vnic }} --auth instance_principal"
      register: vnic_details_result
      tags: "provision"
      changed_when: vnic_details_result.rc != 0
      when: cloud_provider == 'oracle'
    - name: Set public IP facts
      ansible.builtin.set_fact:
        oracle_public_ip: "{{ (vnic_details_result.stdout | from_json).data['public-ip'] }}"
        jvb_ddns_ipv4_addr: "{{ (vnic_details_result.stdout | from_json).data['public-ip'] }}"
        autoscaler_sidecar_public_ip: "{{ (vnic_details_result.stdout | from_json).data['public-ip'] }}"
      tags: "provision"
      when: cloud_provider == 'oracle'
    - name: Set server hostname
      ansible.builtin.hostname:
        name: "{{ prosody_domain_name }}"
      tags: "provision"
    - name: Remove td-agent deb repository
      ansible.builtin.apt_repository:
        repo: "deb https://packages.treasuredata.com/4/{{ ansible_distribution
          | lower }}/{{ ansible_distribution_release | lower }}/ {{ ansible_distribution_release | lower }} contrib"
        state: absent
        update_cache: false
      tags: provision
    - name: Remove NodeSource deb repository 12.x
      ansible.builtin.apt_repository:
        repo: 'deb https://deb.nodesource.com/node_12.x {{ ansible_distribution_release }} main'
        state: absent
        update_cache: false
      tags: "provision"
    - name: Remove NodeSource deb-src repository 12.x
      ansible.builtin.apt_repository:
        repo: 'deb-src https://deb.nodesource.com/node_12.x {{ ansible_distribution_release }} main'
        state: absent
        update_cache: false
      tags: "provision"
    - name: Remove NodeSource deb repository 8.x
      ansible.builtin.apt_repository:
        repo: 'deb https://deb.nodesource.com/node_8.x {{ ansible_distribution_release }} main'
        state: absent
        update_cache: false
      tags: "provision"
    - name: Remove NodeSource deb-src repository 8.x
      ansible.builtin.apt_repository:
        repo: 'deb-src https://deb.nodesource.com/node_8.x {{ ansible_distribution_release }} main'
        state: absent
        update_cache: false
      tags: "provision"
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
      tags: "provision"
    - name: Clean apt cache
      ansible.builtin.apt:
        clean: true
      tags: "provision"
    - name: Vacuum journalctl # noqa no-changed-when
      ansible.builtin.command: journalctl --vacuum-size=200M
      tags: "provision"
    - name: Stop fluentd # noqa ignore-errors
      ansible.builtin.service:
        name: "td-agent"
        state: stopped
        enabled: false
      ignore_errors: true
      when: not standalone_enable_fluentd
      tags: "provision"
    - name: Disable colibri-ws proxy for standalone
      ansible.builtin.set_fact:
        jitsi_meet_colibri_proxy_enabled: false
      tags: "provision"
  post_tasks:
    - name: Install consul signal state script
      ansible.builtin.copy:
        src: "roles/consul-signal/files/set-shard-state-consul.sh"
        dest: "/usr/local/bin/set-shard-state-consul.sh"
        mode: 0755
        owner: root
      tags: "provision"
    - name: Remove td-agent deb repository
      ansible.builtin.apt_repository:
        repo: "deb https://packages.treasuredata.com/4/{{ ansible_distribution | lower }}/{{ ansible_distribution_release
          | lower }}/ {{ ansible_distribution_release | lower }} contrib"
        state: absent
        update_cache: false

    - name: Register installed Jicofo version
      tags: "gather_versions"
      ansible.builtin.shell: |
        set -o pipefail
        dpkg -s jicofo | grep Version | awk '{print $2}' | cut -d'-' -f2
      args:
        executable: /bin/bash
      register: jicofo_version_shell
      changed_when: jicofo_version_shell.rc != 0

    - name: Register installed Meet version
      tags: "gather_versions"
      ansible.builtin.shell: |
        set -o pipefail
        dpkg -s jitsi-meet-web | grep Version | awk '{print $2}' | cut -d'.' -f3 | cut -d'-' -f1
      args:
        executable: /bin/bash
      register: jitsi_meet_version_shell
      changed_when: jitsi_meet_version_shell.rc != 0

    - name: Register installed JVB version
      tags: "gather_versions"
      ansible.builtin.shell: |
        set -o pipefail
        {{ jvb_service_version_shell }}
      args:
        executable: /bin/bash
      register: jvb_version_shell
      changed_when: jvb_version_shell.rc != 0

    - name: Restart rsyslog
      ansible.builtin.service:
        name: rsyslog
        state: restarted
      tags: "provision"

    # change mode on prosody-jvb dump to non-executable to avoid send dump on provision or errors
    - name: Disable prosody-jvb dump exec flag
      tags: "provision"
      ansible.builtin.file:
        path: /usr/local/bin/dump-prosody-jvb.sh
        mode: 0644
      when:
        - not tcpdump_prosody_jvb_enabled
        - cloud_provider == 'aws'

  roles:
  # initial system pre-requisites
    - { role: "vault", tags: "vault", vault_install_flag: true, vault_configure_flag: true, vault_agent_startup: true }
    # - { role: "bootstrap-repos", tags: "bootstrap-repos" }
    # - { role: "carbon-black", tags: "carbon-black" }
    - { role: "openjdk-java", tags: "openjdk" }
    - { role: "jenkins-sshkey", tags: "jenkins-sshkey"}
    - { role: "sshusers", tags: "ssh" }
    - { role: "unattended-upgrades", tags: "unattended-upgrades"}
    - { role: "logrotate", tags: "logrotate", logrotate_rules_core_enabled: true, logrotate_rules_jvb_enabled: true, logrotate_rules_coturn_enabled: true}
    - { role: "journald", tags: "journald"}
    - { role: "iptables-standalone", tags: "iptables", when: cloud_provider=='oracle' }
    - { role: "fluentd-jitsi", tags: "fluentd",
        base_fluentd_install_flag: 'false', fluentd_jitsi_install_flag: true, fluentd_jitsi_configure_flag: false, when: standalone_enable_fluentd}

  # install phase of jitsi components
    - { role: "prosody", tags: "prosody", prosody_install_flag: true, prosody_configure_flag: false}
    - { role: "jitsi-meet-prosody", tags: "jitsi-meet-prosody" }
    - { role: "jicofo", tags: "jicofo", jicofo_install_flag: true, jicofo_configure_flag: false }
    - { role: "jicofo-rtcstats-push", tags: "jicofo-rtcstats-push", jicofo_rtcstats_push_install_flag: true, jicofo_rtcstats_push_configure_flag: false }
    - { role: "jitsi-meet", tags: "jitsi-meet", jitsi_meet_install_flag: true, jitsi_meet_configure_flag: false}
    - { role: jitsi-videobridge, tags: "jitsi-videobridge", jvb_image_build_flag: true, jvb_install_flag: true, jvb_configure_flag: false}
    - { role: "jvb-rtcstats-push", tags: "rtcstats-push", jvb_rtcstats_push_install_flag: true, jvb_rtcstats_push_configure_flag: false }
    - { role: "signal-sidecar", tags: "signal-sidecar", signal_sidecar_install_flag: true, signal_sidecar_configure_flag: false }

  # configure phase of jitsi components
    - { role: "prosody", tags: "prosody", prosody_install_flag: false, prosody_configure_flag: true}
    - { role: "jicofo", tags: "jicofo", jicofo_install_flag: false, jicofo_configure_flag: true }
    - { role: "jicofo-rtcstats-push", tags: "jicofo-rtcstats-push", jicofo_rtcstats_push_install_flag: false, jicofo_rtcstats_push_configure_flag: true }
    - { role: "jitsi-meet", tags: "jitsi-meet", jitsi_meet_install_flag: false, jitsi_meet_configure_flag: true, jitsi_meet_redirect_to_ssl: true}
    - { role: jitsi-videobridge, tags: "jitsi-videobridge",
        jvb_standalone: true, jvb_install_flag: false, jvb_image_build_flag: false, jvb_reconfigure_flag: false, jvb_configure_from_template_flag: true,
        jvb_enable_multiple_shards: false, jvb_hostname: "{{ prosody_domain_name }}", jvb_reconfigure_on_changes_flag: true }
    - { role: "jvb-rtcstats-push", tags: "rtcstats-push", jvb_rtcstats_push_install_flag: false, jvb_rtcstats_push_configure_flag: true }
    - { role: "signal-sidecar", tags: "signal-sidecar", signal_sidecar_install_flag: false, signal_sidecar_configure_flag: true}

  # now run any handlers which haven't run, before continuing
    - { role: flush-handlers, tags: "configure" }

  # additional components here
    #     - { role: jitsi-videobridge-permo, tags: "jitsi-videobridge-permo"}
    - { role: "vector", tags: "vector"}
    - { role: "rsyslog", rsyslog_install_flag: false, tags: "rsyslog", rsyslog_tcp_output_enabled: true}
    - { role: jitsi-dumper, tags: "jitsi-dumper"}
    - { role: jibri-auth, tags: "jibri-auth"}
    - { role: "jigasi-auth", tags: "jigasi-auth"}
    - { role: "jitsi-videobridge-auth", tags: "jitsi-videobridge-auth"}
# removing until testrtc builds can be sorted out
#    - { role: "testrtc", tags: "testrtc", testrtc_install_flag: true, testrtc_configure_flag: true }
    - { role: "consul-standalone", tags: "consul" }
    - { role: "wavefront", tags: "wavefront-proxy", wavefront_install_proxy: true, when: wf_proxy_enabled }
    - { role: "prosody-egress", tags: "prosody-egress" }
    - { role: "tcpdump-prosody-jvb", tags: "tcpdump-prosody-jvb", when: tcpdump_prosody_jvb_enabled }
    - { role: "fluentd-jitsi", tags: "fluentd", fluentd_jitsi_install_flag: false, fluentd_jitsi_configure_flag: true, when: standalone_enable_fluentd}
    - { role: "consul-telegraf", tags: "consul-telegraf" }
    - role: "wavefront"
      tags: "telegraf"
      telegraf_hostname: "{{ prosody_domain_name }}"
      wavefront_proxy_address: "{{ regional_wavefront_proxy }}"
      wavefront_configure_collector: true
      wavefront_install_collector: false
      datadog_extensions: "true"
      when: standalone_telegraf_enabled
      vars:
        telegraf_inputs:
          nginx:
            urls: ["http://localhost:888/nginx_status/"]
          procstat:
            - systemd_unit: "prosody.service"
              cmdline_tag: false
              pid_tag: false
            - systemd_unit: "prosody-jvb.service"
              cmdline_tag: false
              pid_tag: false
          nstat:
            fieldpass: ["TcpInSegs", "TcpOutSegs", "TcpRetransSegs", "UdpInErrors", "Udp6InErrors"]
          prometheus:
            urls: ["http://localhost:6000/metrics", "http://localhost:8888/metrics"]
            namepass: ["http*", "signal*", "{{ telegraf_jicofo_filter }}"]
        telegraf_tags:
          shard-role: "all"
          role: "all"
          jvb_version: "{{ jitsi_videobridge_deb_pkg_version }}"
          environment: "{{ hcv_environment }}"
          shard: "{{ prosody_domain_name }}"
          region: "{{ cloud_region }}"
          release_number: "{{ jitsi_meet_deb_pkg_version }}"
          cloud: "{{ cloud_provider }}"

- name: Gather versions
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: "Create shell file with new version information"
      tags: "gather_versions"
      ansible.builtin.copy:
        mode: 0644
        content: |
          JITSI_MEET_VERSION_NAME="{% for host in groups['all'] %}{{ hostvars[host]['jitsi_meet_version_shell']['stdout'] }}{% endfor %}"
          JICOFO_VERSION_NAME="{% for host in groups['all'] %}{{ hostvars[host]['jicofo_version_shell']['stdout'] }}{% endfor %}"
          JVB_VERSION_NAME="{% for host in groups['all'] %}{{ hostvars[host]['jvb_version_shell']['stdout'] }}{% endfor %}"
        dest: ../../test-results/instance_versions
