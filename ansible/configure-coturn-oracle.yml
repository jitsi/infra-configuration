---
- name: Main
  hosts: "{{ variable_host | default('all')}}"
  gather_facts: true
  become_user: root
  become: true
  vars:
    shard_role: coturn
    cloud_provider: oracle
    nomad_node_role: client
    nomad_node_class: "coturn"
    coturn_ssl_cert_name: "star_jitsi_net-2023-08-19"
    coturn_ssl_crt_dest_path: "{{ coturn_ssl_dest }}/{{ coturn_ssl_cert_name }}.crt"
    coturn_ssl_dest: "/etc/ssl"
    coturn_ssl_key_dest_path: "{{ coturn_ssl_dest }}/{{ coturn_ssl_cert_name }}.key"
    coturn_ssl_key_name: "{{ coturn_ssl_cert_name }}"
    nomad_meta:
      environment: "{{ hcv_environment }}"
      cloud_name: "{{ cloud_name }}"
      cloud_region: "{{ oracle_region }}"
      pool_type: "coturn"
      public_ip: "{{ cloud_public_ip }}"
  vars_files:
    - secrets/coturn.yml
    - secrets/ssl-certificates.yml
    - secrets/oci-logging.yml
    - roles/jitsi-repo/defaults/main.yml
    - secrets/consul.yml
    - secrets/repo.yml
    - secrets/nomad.yml
    - config/vars.yml
    - sites/{{ hcv_environment }}/vars.yml
  pre_tasks:
    - name: Set Nomad Mounts
      ansible.builtin.set_fact:
        nomad_host_volumes:
          - name: "docker-sock-ro"
            path: "/var/run/docker.sock"
            read_only: true
            create: false
          - name: "root-ro"
            path: "/"
            read_only: true
            create: false
          - name: "ssl"
            path: "/etc/ssl"
            read_only: true
            create: false

    - name: Remove old jitsi repo
      ansible.builtin.apt_repository:
        repo: "deb [trusted=yes] {{ jitsi_auth_url }} unstable/"
        state: absent
      tags: setup
    - name: Remove old jitsi trusted repo
      ansible.builtin.apt_repository:
        repo: "deb [trusted=yes] {{ jitsi_auth_url_old }} unstable/"
        state: absent
      tags: setup
    - name: Setup new repo template file
      ansible.builtin.template:
        dest: "/etc/apt/auth.conf.d/jitsi-repo.conf"
        src: "roles/jitsi-repo/templates/jitsi-repo.conf.j2"
        owner: root
        mode: 0600
      tags: setup
    - name: Setup new trusted jitsi repo
      ansible.builtin.apt_repository:
        repo: "deb [trusted=yes] {{ jitsi_repo_url }} unstable/"
        state: present
        update_cache: false
      tags: setup
    - name: Remove deprecated old repo
      ansible.builtin.apt_repository:
        repo: "deb [trusted=yes] {{ jitsi_repo_url_old }} unstable/"
        state: absent
      tags: setup

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
      tags: setup
    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ ansible_fqdn }}"
    - name: Get instance's VNIC
      ansible.builtin.uri:
        url: http://169.254.169.254/opc/v1/vnics/
      register: vnic_result
      tags: setup
    - name: Set vnic fact
      ansible.builtin.set_fact:
        jvb_vnic: "{{ vnic_result.json[0].vnicId }}"
      tags: setup
    - name: Get instance's details
      ansible.builtin.uri:
        url: http://169.254.169.254/opc/v1/instance/
      register: instance_result
      tags: setup
    - name: Set nomad shape variable
      ansible.builtin.set_fact:
        nomad_shape: "{{ instance_result.json.shape }}"
      tags: setup
    - name: Calculate nomad cpu_total_compute
      ansible.builtin.shell: |
        set -o pipefail
        echo $(( $(dmidecode -t 4 | grep 'Current Speed:' | awk '{print $3}') * $(cat /proc/cpuinfo | grep 'processor' | wc -l) ))
      args:
        executable: /bin/bash
      register: cpu_total_compute_result
      tags: setup
      when: nomad_shape == "VM.Standard.A1.Flex"
    - name: Set nomad cpu_total_compute fact
      ansible.builtin.set_fact:
        cpu_total_compute: "{{ cpu_total_compute_result.stdout }}"
      tags: setup
      when: nomad_shape == "VM.Standard.A1.Flex"
    - name: Get instance's Public IP from VNIC
      ansible.builtin.command: "oci network vnic get --vnic-id {{ jvb_vnic }} --auth instance_principal"
      register: vnic_details_result
      changed_when: vnic_details_result.rc != 0 # <- Uses the return code to define when the task has changed.
      tags: setup
    - name: Set IP facts
      ansible.builtin.set_fact:
        ansible_ec2_public_ipv4: "{{ (vnic_details_result.stdout | from_json).data['public-ip'] }}"
        ansible_ec2_local_ipv4: "{{ (vnic_details_result.stdout | from_json).data['private-ip'] }}"
        cloud_public_ip: "{{ (vnic_details_result.stdout | from_json).data['public-ip'] }}"
      tags: setup

  roles:
# TODO IPv6 is not yet supported by oracle
    - { role: "iptables-coturn", tags: "iptables-coturn"}
    - { role: "iptables-serf", tags: "iptables-serf", when: coturn_enable_nomad }
    - { role: "iptables-nomad", tags: "iptables-nomad", when: coturn_enable_nomad }
#    - { role: "ipv6", tags: "ipv6", ipv6_enabled: true}
    - { role: "common", tags: "common"}
    - { role: "unattended-upgrades", tags: "unattended-upgrades"}
    - { role: "logrotate", tags: "logrotate", logrotate_rules_coturn_enabled: true}
    - { role: "journald", tags: "journald"}
    - { role: "rsyslog", tags: "rsyslog"}
    - { role: "fluentd-jitsi", tags: "fluentd", fluentd_jitsi_install_flag: false, fluentd_jitsi_configure_flag: true, when: coturn_enable_fluentd }
    - role: "wavefront"
      tags: "telegraf"
      when: not coturn_enable_nomad
      wavefront_proxy_address: "{{ regional_wavefront_proxy }}"
      wavefront_configure_collector: true
      wavefront_install_collector: false
      datadog_extensions: "true"
      vars:
        telegraf_inputs:
          prometheus:
            urls: ["http://localhost:9641/metrics"]
            namepass: ["turn_total_*", "process_*"]
        telegraf_tags:
          role: "coturn"
          environment: "{{ hcv_environment }}"
          region: "{{ oracle_to_aws_region_map[oracle_region] }}"
          oracle_region: "{{ oracle_region }}"
          cloud: "oracle"
    - { role: "consul-agent", tags: "consul", consul_install_flag: false, when: coturn_enable_nomad}
    - { role: "docker", tags: "docker", when: coturn_enable_nomad }
    - { role: "nomad-jitsi", tags: "nomad-jitsi", when: coturn_enable_nomad }
    - { role: "nomad", tags: "nomad", when: coturn_enable_nomad }

    - { role: "coturn", tags: "coturn", when: not coturn_enable_nomad,
        coturn_cloudwatch_flag: false, coturn_install_flag: false, coturn_ipv6_ddns: true, ipv6_enabled: false }
  tasks:
    - name: Disable native telegraf in nomad case
      ansible.builtin.systemd:
        name: telegraf
        state: stopped
        enabled: false
      when: coturn_enable_nomad
    - name: Copy ssl cert to the ssl folder
      ansible.builtin.copy:
        mode: 0644
        content: "{{ jitsi_net_ssl_certificate }}{{ jitsi_net_ssl_extras }}"
        dest: "{{ coturn_ssl_crt_dest_path }}"
      when: coturn_enable_nomad
    - name: Copy ssl key to the ssl folder
      ansible.builtin.copy:
        mode: 0644
        content: "{{ jitsi_net_ssl_key_name }}"
        dest: "{{ coturn_ssl_key_dest_path }}"
      when: coturn_enable_nomad
    - name: Consul service enablement
      ansible.builtin.systemd:
        name: consul
        state: started
        enabled: true
      when: coturn_enable_nomad
    - name: Start nomad
      ansible.builtin.service:
        name: nomad
        state: started
        enabled: true
      when: coturn_enable_nomad
