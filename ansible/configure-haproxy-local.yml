---
- name: Main
  hosts: all
  gather_facts: true
  gather_timeout: 180
  become_user: root
  become: true
  force_handlers: true
  vars:
    shard_role: haproxy
    cloud_provider: oracle
    cloud_public_ip: ""
    consul_template_env:
      CONSUL_LOCAL_DATACENTER: "{{ hcv_environment }}-{{ cloud_region }}"
      ENVIRONMENT: "{{ hcv_environment }}"
      HAPROXY_AGENT_CHECK_INTERVAL: "{{ haproxy_check_interval }}"
    consul_template_templates:
      - name: "haproxy.cfg.template"
        dest: "/tmp/haproxy.cfg.test"
        cmd: "/usr/local/bin/check-install-haproxy-config.sh /tmp/haproxy.cfg.test"
        perms: 0640
        backup: false
      - name: "live.map.template"
        dest: "{{ haproxy_release_live_map_path }}"
        cmd: "/usr/local/bin/update-haproxy-map.sh {{ haproxy_release_live_map_path }}"
        perms: 0640
        backup: false
      - name: "tenant.map.template"
        dest: "{{ haproxy_release_tenant_map_path }}"
        cmd: "/usr/local/bin/update-haproxy-map.sh {{ haproxy_release_tenant_map_path }}"
        perms: 0640
        backup: false
      - name: "ban-domain.map.template"
        dest: "{{ haproxy_ban_domain_map_path }}"
        cmd: "/usr/local/bin/update-haproxy-map.sh {{ haproxy_ban_domain_map_path }}"
        perms: 0640
        backup: false
      - name: "ban-exact.map.template"
        dest: "{{ haproxy_ban_exact_map_path }}"
        cmd: "/usr/local/bin/update-haproxy-map.sh {{ haproxy_ban_exact_map_path }}"
        perms: 0640
        backup: false
      - name: "ban-prefix.map.template"
        dest: "{{ haproxy_ban_prefix_map_path }}"
        cmd: "/usr/local/bin/update-haproxy-map.sh {{ haproxy_ban_prefix_map_path }}"
        perms: 0640
        backup: false
      - name: "ban-substr.map.template"
        dest: "{{ haproxy_ban_substr_map_path }}"
        cmd: "/usr/local/bin/update-haproxy-map.sh {{ haproxy_ban_substr_map_path }}"
        perms: 0640
        backup: false
    consul_template_template_files:
      - src: roles/hcv-haproxy-configure/files/live.map.template
      - src: roles/hcv-haproxy-configure/files/tenant.map.template
      - src: roles/hcv-haproxy-configure/files/ban-domain.map.template
      - src: roles/hcv-haproxy-configure/files/ban-exact.map.template
      - src: roles/hcv-haproxy-configure/files/ban-prefix.map.template
      - src: roles/hcv-haproxy-configure/files/ban-substr.map.template
    consul_template_template_templates:
      - src: roles/hcv-haproxy-configure/templates/haproxy.cfg.template.j2
    public_ip: "{{ ansible_ec2_public_ipv4 if cloud_provider == 'aws' else cloud_public_ip }}"
    private_ip: "{{ ansible_default_ipv4.address }}"
    host_ip: "{{ public_ip if cloud_provider == 'aws' else private_ip }}"
    ip_component: "{{ host_ip.split('.')[2:4] | join('') }}"
    hostname_component: "{{ hcv_environment }}-haproxy-{{ ip_component }}"
    full_hostname: "{{ hostname_component }}.{{ environment_domain_name }}"
    telegraf_hostname: "{{ full_hostname }}"
  vars_files:
    - secrets/ssh-users.yml
    - secrets/ssl-certificates.yml
    - secrets/consul.yml
    - secrets/oci-logging.yml
    - secrets/repo.yml
    - roles/hcv-haproxy-configure/defaults/main.yml
    - config/vars.yml
    - sites/{{ hcv_environment }}/vars.yml
  pre_tasks:
    - name: Gather AWS facts
      amazon.aws.ec2_metadata_facts:
      tags: "ec2_facts"
      when: cloud_provider == 'aws'
    - name: Get instance's VNIC
      ansible.builtin.uri:
        url: http://169.254.169.254/opc/v1/vnics/
      register: vnic_result
      when: cloud_provider == 'oracle'
    - name: Set JVB VNIC Fact
      ansible.builtin.set_fact:
        jvb_vnic: "{{ vnic_result.json[0].vnicId }}"
      when: cloud_provider == 'oracle'
    - name: Get instance's details
      ansible.builtin.uri:
        url: http://169.254.169.254/opc/v1/instance/
      register: instance_result
      when: cloud_provider == 'oracle'
    - name: Get instance's Public IP from VNIC
      ansible.builtin.command: "oci network vnic get --vnic-id {{ jvb_vnic }} --auth instance_principal"
      register: vnic_details_result
      when: cloud_provider == 'oracle'
    - name: Set Public IP fact
      ansible.builtin.set_fact:
        cloud_public_ip: "{{ (vnic_details_result.stdout | from_json).data['public-ip'] }}"
      when: cloud_provider == 'oracle'
    - name: Setup new repo template file
      ansible.builtin.template:
        dest: "/etc/apt/auth.conf.d/jitsi-repo.conf"
        src: "roles/jitsi-repo/templates/jitsi-repo.conf.j2"
        owner: root
        mode: 0600
      tags: setup
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
    - name: Install SSL Certificates
      ansible.builtin.copy:
        mode: 0640
        content: "{{ item.content }}"
        dest: "/etc/ssl/{{ item.name }}.pem"
      with_items: "{{ haproxy_ssl_certificates }}"

    - name: Install pip boto3
      ansible.builtin.pip:
        name: boto3
        state: present
    - name: Ensure custom facts directory exists
      ansible.builtin.file:
        mode: 0755
        path: /etc/ansible/facts.d
        recurse: true
        state: directory
    - name: Change instance hostname
      ansible.builtin.hostname:
        name: "{{ full_hostname }}"
    - name: Add instance name tag
      amazon.aws.ec2_tag:
        state: present
        resource: "{{ ansible_ec2_instance_id }}"
        tags:
          Name: "{{ full_hostname }}"
      when: cloud_provider == 'aws'
    - name: Add local instance hostname and private ip to the hosts file
      ansible.builtin.lineinfile:
        dest: /etc/hosts
        state: present
        line: "{{ private_ip }} {{ full_hostname }}"
      when: not haproxy_configure_only

    - name: Ensure that fluentd stopped # noqa ignore-errors
      ansible.builtin.service:
        name: "td-agent"
        state: stopped
        enabled: false
      ignore_errors: true
      when: not haproxy_enable_fluentd
    - name: Stop jitsi-system-events # noqa ignore-errors
      ansible.builtin.service:
        name: "jitsi-system-events"
        state: stopped
        enabled: false
      ignore_errors: true
  roles:
    - { role: "jitsi-dumper", tags: "jitsi-dumper" }
    - { role: "iptables-haproxy", tags: "iptables", when: cloud_provider == 'oracle' }
    - { role: "sshusers", tags: "ssh" }
    - { role: "unattended-upgrades", tags: "unattended-upgrades"}
    - { role: "logrotate", tags: "logrotate", logrotate_rules_haproxy_enabled: true}
    - { role: "journald", tags: "journald"}
    - { role: "rsyslog", tags: "rsyslog"}
    - { role: "fluentd-jitsi", tags: "fluentd", fluentd_jitsi_install_flag: false, fluentd_jitsi_configure_flag: true, when: haproxy_enable_fluentd }
    - role: "wavefront"
      tags: "telegraf"
      wavefront_proxy_address: "{{ regional_wavefront_proxy }}"
      wavefront_install_collector: true
      datadog_extensions: "true"
      when: telegraf_enabled and not datadog_enabled
      vars:
        telegraf_inputs:
          nginx:
            urls: ["http://localhost:888/nginx_status/"]
          haproxy:
            # haproxy field ref: https://cbonte.github.io/haproxy-dconv/2.5/management.html#9.1
            # fieldpass: ["agent_health", "econ", "ereq", "eresp", "rate", "rate_max", "scur", "wretr", "wredis"]
            fieldpass: ["agent_health", "ereq", "rate", "rate_max", "scur", "wretr", "wredis"]
            servers: ["http://localhost:8080/haproxy_stats"]
            username: "admin"
            password: "admin"
          nstat:
            fieldpass: ["TcpInSegs", "TcpOutSegs", "TcpRetransSegs"]
        telegraf_tags:
          role: "haproxy"
          environment: "{{ hcv_environment }}"
          region: "{{ cloud_region }}"
          cloud: "{{ cloud_provider }}"

    - { role: "haproxy", tags: "haproxy"}
    - { role: "consul-haproxy", tags: "consul-haproxy",
        consul_haproxy_install_flag: false, consul_haproxy_public_ip: "{{ public_ip }}", consul_haproxy_private_ip: "{{ private_ip }}" }
    - { role: "hcv-haproxy-configure", tags: "hcv-haproxy-configure", haproxy_reconfigure_run: false }
    - { role: "consul-template", tags: "consul-template", when: haproxy_enable_consul_template }
    - { role: "hcv-haproxy-rsyslog", tags: "hcv-haproxy-rsyslog", haproxy_reconfigure_rsyslog: true }
    - { role: "haproxy-tenant-pin", tags: "haproxy-tenant-pin", haproxy_tenant_pin_install_flag: true, haproxy_tenant_pin_configure_flag: true, when: not haproxy_enable_consul_template }
    - { role: "jvb-colibri-proxy", "tags": "jvb-colibri-proxy", when: jvb_colibri_proxy_enabled}
  post_tasks:
    - name: make sure haproxy.cfg is installed from /tmp once
      ansible.builtin.shell:
        cmd: "/usr/local/bin/check-install-haproxy-config.sh /tmp/haproxy.cfg.test"
      when:
        - haproxy_boot_flag
    - name: wait 15 seconds for mesh to form before setting healthy
      ansible.builtin.pause:
        seconds: 15
      when:
        - haproxy_boot_flag
    - name: write health map file as up on boot
      ansible.builtin.copy:
        mode: 0644
        dest: "{{ haproxy_health_up_map_path }}"
        content: "up true"
      when:
        - haproxy_enable_consul_template
        - haproxy_boot_flag
