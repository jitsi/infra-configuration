---
- name: Main
  hosts: all
  gather_facts: true
  become_user: root
  become: true
  force_handlers: true
  vars:
    shard_role: core
    cloud_provider: aws
    core_public_ip: "{{ oracle_public_ip | default('') if core_cloud_provider == 'oracle' else ansible_ec2_public_ipv4 | default('') }}"
    core_private_ip: "{{ ansible_default_ipv4.address }}"
    consul_cloud_provider: "{{ core_cloud_provider }}"
    procstat_visitor_units_str: "{% for i in range(visitors_count|int) %}prosody-v-{{ i }}{% if not loop.last %},{% endif %}{% endfor %}"
    procstat_units: "{{ ['prosody','prosody-jvb', 'prosody-egress'] + procstat_visitor_units_str.split(',') if visitors_enabled=='true'
      else ['prosody','prosody-jvb', 'prosody-egress'] }}"
    telegraf_inputs_procstat_str: "[{% for unit in procstat_units %}{systemd_unit: {{ unit }}.service, cmdline_tag: false, pid_tag: false}
      {% if not loop.last %},{% endif %}{% endfor %}]"
    telegraf_inputs_procstat: "{{ telegraf_inputs_procstat_str|from_yaml }}"
    adl: "{{ ansible_distribution | lower }}"
    adrl: "{{ ansible_distribution_release | lower }}"
  vars_files:
    - secrets/ssh-users.yml
    - secrets/ssl-certificates.yml
    - secrets/prosody.yml
    - secrets/jibri.yml
    - secrets/jigasi.yml
    - secrets/wavefront.yml
    - secrets/coturn.yml
    - secrets/asap-keys.yml
    - secrets/jvb.yml
    - secrets/consul.yml
    - secrets/prosody-egress-aws.yml
    - secrets/oci-logging.yml
    - secrets/aws-cloudwatch.yml
    - roles/jitsi-repo/defaults/main.yml
    - secrets/repo.yml
    - config/vars.yml
    - sites/{{ hcv_environment }}/vars.yml
  pre_tasks:
    - name: Remove old jitsi repo
      ansible.builtin.apt_repository:
        repo: "deb [trusted=yes] {{ jitsi_auth_url }} unstable/"
        state: absent
      tags: setup
    - name: Remove old jitsi trusted repo
      ansible.builtin.apt_repository:
        repo: "deb [trusted=yes] {{ jitsi_auth_url_old }} unstable/"
        state: absent
      tags: setup
    - name: Setup new repo template file
      ansible.builtin.template:
        dest: "/etc/apt/auth.conf.d/jitsi-repo.conf"
        src: "roles/jitsi-repo/templates/jitsi-repo.conf.j2"
        owner: root
        mode: 0600
      tags: setup

    - name: Setup new trusted jitsi repo
      ansible.builtin.apt_repository:
        repo: "deb [trusted=yes] {{ jitsi_repo_url }} unstable/"
        state: present
        update_cache: false
      tags: setup

    - name: Fail when shard number is not set
      ansible.builtin.fail:
        msg: "Fail when shard_number is not correctly set"
      when: not ((shard_number | int) >= 1 and (shard_number | int) <= 65535)

    - name: Gather AWS facts
      amazon.aws.ec2_metadata_facts:
      tags: "ec2_facts"
      when: core_cloud_provider == 'aws'

    - name: Get instance's VNIC
      ansible.builtin.uri:
        url: http://169.254.169.254/opc/v1/vnics/
      register: vnic_result
      tags: "provision"
      when: core_cloud_provider == 'oracle'
    - name: Set Oracle VNIC fact
      ansible.builtin.set_fact:
        oracle_vnic: "{{ vnic_result.json[0].vnicId }}"
      tags: "provision"
      when: core_cloud_provider == 'oracle'
    - name: Get instance's details
      ansible.builtin.uri:
        url: http://169.254.169.254/opc/v1/instance/
      register: instance_result
      tags: "provision"
      when: core_cloud_provider == 'oracle'
    - name: Set oracle shape fact
      ansible.builtin.set_fact:
        oracle_shape: "{{ instance_result.json.shape }}"
      tags: "provision"
      when: core_cloud_provider == 'oracle'
    - name: Get instance's Public IP from VNIC # noqa no-changed-when
      ansible.builtin.command: "oci network vnic get --vnic-id {{ oracle_vnic }} --auth instance_principal"
      register: vnic_details_result
      tags: "provision"
      when: core_cloud_provider == 'oracle'
    - name: Set public IP vars
      ansible.builtin.set_fact:
        oracle_public_ip: "{{ (vnic_details_result.stdout | from_json).data['public-ip'] }}"
      tags: "provision"
      when: core_cloud_provider == 'oracle'

    - name: Remove NodeSource deb repository
      ansible.builtin.apt_repository:
        repo: 'deb https://deb.nodesource.com/node_12.x {{ ansible_distribution_release }} main'
        state: absent
        update_cache: false
      tags: boot
    - name: Remove NodeSource deb-src repository
      ansible.builtin.apt_repository:
        repo: 'deb-src https://deb.nodesource.com/node_12.x {{ ansible_distribution_release }} main'
        state: absent
        update_cache: false
      tags: boot
    - name: Remove td-agent deb repository
      ansible.builtin.apt_repository:
        repo: "deb https://packages.treasuredata.com/4/{{ adl }}/{{ adrl }}/ {{ adrl }} contrib"
        state: absent
        update_cache: false
      tags: boot
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ ansible_fqdn }}"
      when: core_cloud_provider == 'aws'

    - name: Stop fluentd
      ansible.builtin.service:
        name: "td-agent"
        state: stopped
        enabled: false
      register: stop_fluentd_results
      ignore_errors: true
      tags: boot
      when: not core_enable_fluentd

  post_tasks:
    - name: Restart rsyslog
      ansible.builtin.service:
        name: rsyslog
        state: restarted
  roles:
    - { role: "iptables-signal", tags: "iptables", when: core_cloud_provider == 'oracle' }
    - { role: "iptables-serf", tags: "iptables-serf", when: core_cloud_provider == 'oracle' }
    - { role: "sshusers", tags: "ssh" }
    - { role: "logrotate", tags: "logrotate", logrotate_rules_core_enabled: true}
    - { role: "journald", tags: "journald"}
    - { role: "rsyslog", tags: "rsyslog"}
    - { role: "fluentd-jitsi", tags: "fluentd",
        cloud_provider: "{{ core_cloud_provider }}", fluentd_jitsi_install_flag: false, fluentd_jitsi_configure_flag: true, when: core_enable_fluentd }
    - role: "wavefront"
      tags: "telegraf"
      wavefront_proxy_address: "{{ regional_wavefront_proxy }}"
      wavefront_install_collector: true
      datadog_extensions: "true"
      when: telegraf_enabled and not datadog_enabled
      vars:
        telegraf_inputs:
          nginx:
            urls: ["http://localhost:888/nginx_status/"]
          procstat: "{{ telegraf_inputs_procstat }}"
          prometheus:
            urls: ["http://localhost:6000/metrics"]
            namepass: ["http*", "signal*", "prosody*"]
        telegraf_tags:
          shard-role: "core"
          role: "core"
          environment: "{{ hcv_environment }}"
          shard: "{{ shard_name }}"
          region: "{{ cloud_region }}"
          release_number: "{{ jitsi_release_number }}"
          cloud: "{{ cloud_provider }}"
          cloud_provider: "{{ core_cloud_provider }}"
    - { role: "prosody", tags: "prosody", prosody_install_flag: false, prosody_configure_flag: true,
        prosody_visitors_enabled: "{{ visitors_enabled }}", prosody_visitors_count: "{{ visitors_count }}" }
    - { role: "tcpdump-prosody-jvb", tags: "tcpdump-prosody-jvb" }
    - { role: "signal-sidecar", tags: "signal-sidecar", signal_sidecar_install_flag: false, signal_sidecar_configure_flag: true }
    # enable java 11 if set for the environment
    - { role: "openjdk-java", tags: "openjdk-java", java_use_11: "{{ jicofo_java_11 }}", java_install_flag: false }
    - { role: "jicofo", tags: "jicofo", jicofo_install_flag: false, jicofo_configure_flag: true,
        jicofo_visitors_enabled: "{{ visitors_enabled }}", jicofo_visitors_count: "{{ visitors_count }}" }
    - { role: "jitsi-meet", tags: "jitsi-meet", jitsi_meet_install_flag: false, jitsi_meet_configure_flag: true,
        jitsi_meet_visitors_enabled: "{{ visitors_enabled }}", jitsi_meet_visitors_count: "{{ visitors_count }}" }
    - { role: "jibri-auth", tags: "jibri-auth"}
    - { role: "jigasi-auth", tags: "jigasi-auth"}
    - { role: "jitsi-videobridge-auth", tags: "jitsi-videobridge-auth"}
    - { role: "jitsi-dumper", tags: "jitsi-dumper"}
    - { role: "testrtc", tags: "testrtc", testrtc_configure_flag: true }
    - { role: "consul-signal", tags: "consul-signal", consul_signal_install_flag: false,
        consul_signal_public_ip: "{{ core_public_ip }}", consul_cloud_provider: "{{ core_cloud_provider }}" }
    - { role: "prosody-egress", tags: "prosody-egress",
        prosody_egress_install_flag: false, prosody_egress_configure_flag: true, egress_cloud_provider: "{{ core_cloud_provider }}" }
