---
# first create a user for the jibri docker compose service
- name: Create jibricompose user
  ansible.builtin.user:
    name: jibricompose
    comment: "Jitsi Meet Docker Compose Service Account"
    shell: /bin/bash
    home: /home/jibricompose
    state: present

- name: Add jibricompose user to docker group
  ansible.builtin.user:
    name: jibricompose
    groups: docker
    append: true

- name: Generate config directory root
  ansible.builtin.file:
    path: /home/jibricompose/.jitsi-meet-cfg
    owner: jibricompose
    state: directory
    mode: 0755

- name: Generate config directory root
  ansible.builtin.file:
    path: "/home/jibricompose/.jitsi-meet-cfg/{{ item }}"
    owner: jibricompose
    state: directory
    mode: 0755
  with_items:
    - jibri

- name: Create jibri compose directory
  ansible.builtin.file:
    path: /home/jibricompose/jibri
    owner: jibricompose
    state: directory
    mode: 0755

- name: Create jibri compose scripts directory
  ansible.builtin.file:
    path: /home/jibricompose/jibri/scripts
    owner: jibricompose
    state: directory
    mode: 0755

- name: Place startup script
  ansible.builtin.copy:
    src: "custom-start.sh"
    dest: "/home/jibricompose/jibri/scripts/11-custom-start"
    owner: jibricompose
    mode: 0755

- name: Place empty xmpp config
  ansible.builtin.copy:
    content: ""
    dest: "/home/jibricompose/jibri/xmpp.conf"
    owner: jibricompose
    mode: 0644

- name: Generate env file for docker-compose
  ansible.builtin.template:
    src: "env.j2"
    dest: "/home/jibricompose/jibri/.env"
    owner: jibricompose
    mode: 0644

- name: Place docker-compose.yml file
  ansible.builtin.copy:
    src: "docker-compose.yml"
    dest: "/home/jibricompose/jibri/docker-compose.yml"
    owner: jibricompose
    mode: 0644

- name: Place reconfigure-jibri-wrapper.sh
  ansible.builtin.copy:
    src: "reconfigure-jibri-wrapper.sh"
    dest: "/usr/local/bin/reconfigure-jibri-wrapper.sh"
    owner: root
    mode: 0755

- name: Place systemd file for jibri service
  ansible.builtin.copy:
    src: "jibri.service"
    dest: "/etc/systemd/system/jibri.service"
    owner: root
    mode: 0644

- name: Copy all jars from /usr/bin to /usr/local/bin for use in jibri
  ansible.builtin.shell: "cp /usr/bin/*.jar /usr/local/bin"

# script to handle stats to telegraf
- name: Copy status telegraf script oracle
  ansible.builtin.template:
    src: "roles/jibri-java/templates/jibri-status-oracle.j2"
    dest: "/usr/local/bin/jibri-status.sh"
    owner: "root"
    mode: 0755

  # script to handle health check failures
- name: Copy terminate instance script oracle
  ansible.builtin.template:
    src: "roles/jibri-java/templates/terminate_instance_oracle.j2"
    dest: "/usr/local/bin/terminate_instance.sh"
    owner: "root"
    mode: 0755

- name: Copy health check script oracle
  ansible.builtin.template:
    src: "roles/jibri-java/templates/jibri-health-oracle.j2"
    dest: "/usr/local/bin/jibri-health.sh"
    owner: "root"
    mode: 0755

# scripts to handle configuration and reconfiguration of jibri
- name: Copy termination monitor script
  ansible.builtin.copy:
    src: "roles/jibri-java/files/wait_graceful_shutdown.sh"
    dest: "{{ jibri_scripts_dir }}/wait_graceful_shutdown.sh"
    mode: 0755

# scripts to handle configuration and reconfiguration of jibri
- name: Copy graceful termination script oracle
  ansible.builtin.template:
    src: "roles/jibri-java/templates/graceful_shutdown_terminate_oracle.j2"
    dest: "/usr/local/bin/graceful_shutdown_terminate.sh"
    mode: 0755

# update systemd to start jibri on boot
- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true

# flush force_handlers:
- name: Flush handlers for .env file completion
  ansible.builtin.meta: flush_handlers

- name: Enable jibri service
  ansible.builtin.systemd:
    name: jibri
    enabled: true
    state: started

  # Run the metric reporting script regularly
- name: Jibri status script cron
  ansible.builtin.cron:
    user: "ubuntu"
    state: present
    name: "Jibri status script"
    minute: "*"
    hour: "*"
    job: "/usr/local/bin/jibri-status.sh > /tmp/status-cron-output 2>&1"


# Run the metric reporting script regularly
- name: Jibri health script cron
  ansible.builtin.cron:
    user: root
    state: present
    name: "Jibri health script"
    minute: "*"
    hour: "*"
    job: "/usr/local/bin/jibri-health.sh > /tmp/health-cron-output 2>&1"
