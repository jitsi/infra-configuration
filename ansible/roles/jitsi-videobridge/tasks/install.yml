---
# install prerequisite packages
- name: Install videobridge prereqs
  ansible.builtin.apt:
    name: ["authbind", "jq", "mc", "stress", "vim", "htop"]
    state: present

- name: Install monitoring pip prereqs - decorator
  ansible.builtin.pip:
    name: decorator
    state: present
  when: (ansible_distribution_major_version | int) >= 20

- name: Install stats pip pre reqs
  ansible.builtin.pip:
    name: datadog
    state: present
  when: (ansible_distribution_major_version | int) >= 20

# begin install of intended jvb package
- name: Mark unhold on jitsi-videobridge package version
  ansible.builtin.command: apt-mark unhold {{ jitsi_videobridge_deb_pkg_name }}

- name: Install jitsi-videobridge package
  ansible.builtin.apt:
    name: "{{ jitsi_videobridge_deb_pkg_name }}={{ jitsi_videobridge_deb_pkg_version }}"
    state: present
  notify:
    - restart jitsi-videobridge
  when: ansible_service_mgr != "systemd"

- name: Install jitsi-videobridge package
  ansible.builtin.apt:
    name: "{{ jitsi_videobridge_deb_pkg_name }}={{ jitsi_videobridge_deb_pkg_version }}"
    state: present
  notify:
    - Restart jitsi-videobridge systemd
  when: ansible_service_mgr == "systemd"

- name: Mark hold on JVB package version
  ansible.builtin.command: apt-mark hold {{ jitsi_videobridge_deb_pkg_name }}

# set the UDP receive buffer and max packet count higher
- name: JVB udp buffer limits
  ansible.builtin.template:
    dest: "/etc/sysctl.d/20-jvb-udp-buffers.conf"
    src: "jvb-udp-buffers.conf.j2"
    owner: root
    group: root
    mode: 0644

# set the PAM limits to allow more open files for JVB user
- name: JVB file open limits
  ansible.builtin.copy:
    mode: 0644
    dest: "/etc/security/limits.d/jvb.conf"
    content: "jvb - nofile {{ jvb_open_file_limit }}\nroot - nofile {{ jvb_open_file_limit }}\njvb soft core unlimited\nroot soft core unlimited\n"

- name: PAM common session applies limits # noqa no-tabs
  ansible.builtin.lineinfile:
    dest: /etc/pam.d/common-session
    line: "session required\tpam_limits.so"

- name: PAM common noninteractive-session applies limits # noqa no-tabs
  ansible.builtin.lineinfile:
    dest: /etc/pam.d/common-session-noninteractive
    line: "session required\tpam_limits.so"

# set the systemd limits for threads per user
- name: Set systemd UserTasksMax setting
  ansible.builtin.lineinfile:
    dest: /etc/systemd/logind.conf
    line: "UserTasksMax=80%"
    regexp: "UserTasksMax="
  when: ansible_service_mgr == "systemd"

# set the systemd limits for default threads
- name: Set systemd DefaultTasksMax setting
  ansible.builtin.lineinfile:
    dest: /etc/systemd/system.conf
    line: "DefaultTasksMax=30405"
    regexp: "DefaultTasksMax="
  when: ansible_service_mgr == "systemd"

# provide script for managing the auto-scale group lifecycle queue
- name: Upload lifecyle script
  ansible.builtin.copy:
    dest: "/usr/local/bin/monitor-terminating-instance.sh"
    src: "monitor-terminating-instance.sh"
    mode: 0755
    owner: root

- name: Upload lifecyle script systemd
  ansible.builtin.copy:
    dest: "/etc/systemd/system/monitor-terminating-instance.service"
    src: "monitor-terminating-instance.service"
    mode: 0644
    owner: root

- name: Copy terminate instance script oracle
  ansible.builtin.template:
    src: "terminate_instance_oracle.j2"
    dest: "{{ jvb_path_to_terminate_instance_script }}"
    owner: "{{ jvb_username }}"
    group: jitsi
    mode: 0755
  when: jvb_cloud_provider == "oracle"

# add a health checker script to upload health stats to CloudWatch
- name: JVB health check script upload
  ansible.builtin.copy:
    dest: "{{ path_to_health_script }}"
    src: "jvb-health-check.sh"
    mode: 0755
    owner: root
  when: jvb_cloud_provider == "aws"

# add a health checker script
- name: JVB health check script upload
  ansible.builtin.copy:
    dest: "{{ path_to_health_script }}"
    src: "jvb-health-check-oracle.sh"
    mode: 0755
    owner: root
  when: jvb_cloud_provider == "oracle"

# add a stats script to wrap DD colibri script
- name: JVB stats script upload aws
  ansible.builtin.copy:
    dest: "{{ path_to_stats_script }}"
    src: "jvb-stats.sh"
    mode: 0755
    owner: root
  when: jvb_cloud_provider == "aws"

- name: JVB stats script upload oracle
  ansible.builtin.copy:
    dest: "{{ path_to_stats_script }}"
    src: "jvb-stats-oracle.sh"
    mode: 0755
    owner: root
  when: jvb_cloud_provider == "oracle"

# add a stats script to upload colibri stats to DataDog
- name: JVB stats python script upload
  ansible.builtin.copy:
    dest: "{{ path_to_stats_python_script }}"
    src: "jvb-stats.py"
    mode: 0755
    owner: root

# provide bash script for last minute final configuration based on AWS tags
- name: Upload postinstall script aws
  ansible.builtin.template:
    dest: "/usr/local/bin/postinstall-jvb.sh"
    src: "postinstall-jvb.sh.j2"
    mode: 0755
    owner: root
  when: jvb_cloud_provider == "aws"

- name: Upload postinstall script upload
  ansible.builtin.template:
    dest: "/usr/local/bin/postinstall-jvb-oracle.sh"
    src: "postinstall-jvb-oracle.sh.j2"
    mode: 0755
    owner: root
  when: jvb_cloud_provider == "oracle"

# provide bash script for last minute final configuration via ansible
- name: Upload postinstall second script aws
  ansible.builtin.copy:
    dest: "/usr/local/bin/configure-jvb-local.sh"
    src: "configure-jvb-local.sh"
    mode: 0755
    owner: root
  when: jvb_cloud_provider == "aws"

- name: Upload postinstall second script oracle
  ansible.builtin.copy:
    dest: "/usr/local/bin/configure-jvb-local-oracle.sh"
    src: "configure-jvb-local-oracle.sh"
    mode: 0755
    owner: root
  when: jvb_cloud_provider == "oracle"

# script to configure the secondary VNIC
- name: Upload configure secondary vnic oracle
  ansible.builtin.copy:
    dest: "/usr/local/bin/secondary_vnic_all_configure_oracle.sh"
    src: "secondary_vnic_all_configure_oracle.sh"
    mode: 0755
    owner: root
  when: jvb_cloud_provider == "oracle"

# Stop the service if we are  building an AMI
- name: Stop JVB for image
  ansible.builtin.service:
    name: "{{ jvb_systemd_service_name }}"
    state: stopped
    enabled: false
  when: jvb_image_build_flag

# Clear logs for JVB if we are  building an AMI
- name: Delete JVB logs for image
  ansible.builtin.file:
    path: /var/log/jitsi/jvb.log
    state: absent
  when: jvb_image_build_flag

# Clear PID for JVB if we are  building an AMI
- name: Delete JVB pid for image
  ansible.builtin.file:
    path: /var/run/jitsi-videobridge/jitsi-videobridge.pid
    state: absent
  when: jvb_image_build_flag

- name: Create authbind directory
  ansible.builtin.file:
    path: /etc/authbind
    owner: root
    mode: 0755
    state: directory

- name: Create authbind byport directory
  ansible.builtin.file:
    path: /etc/authbind/byport
    owner: root
    mode: 0755
    state: directory

- name: JVB authbind item
  ansible.builtin.copy:
    dest: /etc/authbind/byport/443
    content: ""
    mode: 0755
    owner: "{{ jvb_username }}"

- name: YourKit Installer
  ansible.builtin.unarchive:
    src: "{{ jvb_yourkit_url }}"
    dest: /opt
    remote_src: true
  when: jvb_download_yourkit

    # force restart of jitsi-videobridge even if not updated
# - debug: trigger jitsi-videobridge
#   notify: restart jitsi-videobridge
#   changed_when: true

- name: Copy pre-terminate collection script
  ansible.builtin.copy:
    src: "collect-pre-terminate-stats-jvb.sh"
    dest: "/usr/local/bin/collect-pre-terminate-stats-jvb.sh"
    mode: 0755
    owner: root

- name: Copy pre-terminate dump script
  ansible.builtin.copy:
    src: "dump-pre-terminate-stats-jvb.sh"
    dest: "/usr/local/bin/dump-pre-terminate-stats-jvb.sh"
    mode: 0755
    owner: root
