---
# detect currently running prosody (finds either prosody-trunk or prosody))
- name: Register installed prosody package
  ansible.builtin.shell: |
    set -o pipefail
    dpkg -l | awk '/^\Si  prosody/ {print $2}'
  args:
    executable: /bin/bash
  register: jitsi_meet_prosody_package_shell

- name: Set prosody installed version variables
  ansible.builtin.set_fact:
    jitsi_meet_prosody_installed_package: "{{ jitsi_meet_prosody_package_shell.stdout }}"

- name: Create temp dir for jitsi-meet-prosody download
  ansible.builtin.tempfile:
    state: directory
    suffix: jitsi-meet-prosody
  register: jitsi_meet_prosody_tempdir

- name: Download jitsi-meet-prosody .deb # noqa command-instead-of-module
  ansible.builtin.command: apt-get download {{ jitsi_meet_prosody_deb_pkg_name }}={{ jitsi_meet_prosody_deb_pkg_version }}
  args:
    chdir: "{{ jitsi_meet_prosody_tempdir.path }}"

- name: Unpack jitsi-meet-prosody .deb
  ansible.builtin.shell: dpkg -x {{ jitsi_meet_prosody_deb_pkg_name }}*.deb .
  args:
    chdir: "{{ jitsi_meet_prosody_tempdir.path }}"

- name: Copy jitsi-meet-prosody plugins to appropriate location
  ansible.builtin.command: cp -a ./usr/share/jitsi-meet/prosody-plugins /usr/share/jitsi-meet
  args:
    chdir: "{{ jitsi_meet_prosody_tempdir.path }}"

- name: Remove mod_smacks as we are running prosody that has that module
  ansible.builtin.file:
    path: "/usr/share/jitsi-meet/prosody-plugins/mod_smacks.lua"
    state: absent

- name: Remove mod_external_services as we are running prosody that has that module
  ansible.builtin.file:
    path: "/usr/share/jitsi-meet/prosody-plugins/mod_external_services.lua"
    state: absent

- name: Remove jitsi-meet-prosody tempdir
  ansible.builtin.file:
    path: "{{ jitsi_meet_prosody_tempdir.path }}"
    state: absent

- name: Copy over the external events lib
  ansible.builtin.copy:
    src: "ext_events.lib.lua"
    dest: "/usr/share/jitsi-meet/prosody-plugins/"
    mode: 0644
  notify: Reload prosody plugins

- name: Copy over the asap lib
  ansible.builtin.copy:
    src: "asap.lib.lua"
    dest: "/usr/share/jitsi-meet/prosody-plugins/"
    mode: 0644
  notify: Reload prosody plugins

- name: Check do we have the patch installed
  ansible.builtin.stat:
    path: "/usr/share/jitsi-meet/prosody-plugins/stanza_router_no-log.patch"
  register: standza_router_patch_exists
- name: Apply stanza_router_no-log.patch
  ansible.posix.patch:
    basedir: /usr/share/lua/5.1/prosody/
    src: "/usr/share/jitsi-meet/prosody-plugins/stanza_router_no-log.patch"
    strip: 1
    remote_src: true
  when:
    - (prosody_minor_version | int) == 12
    - standza_router_patch_exists.stat.exists
