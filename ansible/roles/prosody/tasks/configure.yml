---

# prosody-jvb
- name: Configure prosody JVB service
  ansible.builtin.script: setup-prosody-jvb-service.sh
  args:
    creates: /lib/systemd/system/prosody-jvb.service
  when: prosody_jvb_configure_flag

- name: Set tcp read buffer
  ansible.posix.sysctl:
    name: net.ipv4.tcp_rmem
    value: "10240 87380 12582912"
    sysctl_set: true
    state: present
    reload: true

- name: Set tcp write buffer
  ansible.posix.sysctl:
    name: net.ipv4.tcp_wmem
    value: "10240 87380 12582912"
    sysctl_set: true
    state: present
    reload: true

- name: Set tcp backlog buffer max
  ansible.posix.sysctl:
    name: net.core.netdev_max_backlog
    value: "10000"
    state: present
    sysctl_set: true
    reload: true

- name: Set local port range
  ansible.posix.sysctl:
    name: net.ipv4.ip_local_port_range
    value: "10240 65535"
    state: present
    sysctl_set: true
    reload: true

- name: Set tcp retries to 7 (25.4 sec)
  ansible.posix.sysctl:
    name: net.ipv4.tcp_retries2
    value: "7"
    sysctl_set: true
    state: present
    reload: true

- name: Prosody file open limits
  ansible.builtin.copy:
    mode: 0644
    dest: "/etc/security/limits.d/prosody.conf"
    content: "prosody - nofile {{ prosody_open_file_limit }}\nroot - nofile {{ prosody_open_file_limit }}"

# set the systemd limits for default threads
- name: Set systemd DefaultLimitNOFILE setting
  ansible.builtin.lineinfile:
    dest: /etc/systemd/system.conf
    line: "DefaultLimitNOFILE={{ prosody_open_file_limit }}"
    regexp: "DefaultLimitNOFILE="
  when: ansible_service_mgr == "systemd"

# set the systemd limits for default threads
- name: Set systemd user DefaultLimitNOFILE setting
  ansible.builtin.lineinfile:
    dest: /etc/systemd/user.conf
    line: "DefaultLimitNOFILE={{ prosody_open_file_limit }}"
    regexp: "DefaultLimitNOFILE="
  when: ansible_service_mgr == "systemd"

# set systemd to allow accounting for prosody
- name: Create systemd prosody service overrides directory
  ansible.builtin.file:
    mode: 0755
    path: /etc/systemd/system/prosody.service.d
    state: directory

- name: Set systemd prosody service overrides
  ansible.builtin.copy:
    dest: /etc/systemd/system/prosody.service.d/50-accounting.conf
    mode: 0644
    owner: root
    content: |
      [Service]
      MemoryAccounting=yes
      CPUAccounting=yes
  register: prosody_accounting

# set systemd to allow accounting for prosody
- name: Create systemd prosody service overrides directory
  ansible.builtin.file:
    mode: 0755
    path: /etc/systemd/system/prosody-jvb.service.d
    state: directory
  when: prosody_jvb_configure_flag

- name: Write systemd prosody JVB service overrides
  ansible.builtin.copy:
    dest: /etc/systemd/system/prosody-jvb.service.d/50-accounting.conf
    mode: 0644
    owner: root
    content: |
      [Service]
      MemoryAccounting=yes
      CPUAccounting=yes
  register: prosody_jvb_accounting
  when: prosody_jvb_configure_flag

- name: Run systemd daemon-reload for prosody accounting
  ansible.builtin.systemd:
    daemon_reload: true
  when: prosody_accounting.changed or (prosody_jvb_configure_flag and prosody_jvb_accounting.changed)

# detect currently running prosody (finds either prosody-trunk or prosody))
- name: Register installed prosody package
  ansible.builtin.shell: |
    set -o pipefail
    dpkg -l | awk '/^\Si  prosody/ {print $2}'
  args:
    executable: /bin/bash
  register: prosody_package_shell

- name: Set prosody installed version variables
  ansible.builtin.set_fact:
    prosody_installed_package: "{{ prosody_package_shell.stdout }}"

# generate new certificates for auth domain
- name: Generate auth domain certificate
  ansible.builtin.command: |
    openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj
    "/O={{ prosody_domain_name }}/OU={{ ansible_hostname }}/CN={{ prosody_auth_domain_name }}/
    emailAddress=webmaster@{{ ansible_hostname }}.{{ prosody_domain_name }}" \
    -keyout /var/lib/prosody/{{ prosody_auth_domain_name }}.key \
    -out /var/lib/prosody/{{ prosody_auth_domain_name }}.crt
  args:
    creates: /var/lib/prosody/{{ prosody_auth_domain_name }}.key

- name: Link auth domain keyfile
  ansible.builtin.file:
    state: link
    src: /var/lib/prosody/{{ prosody_auth_domain_name }}.key
    dest: /etc/prosody/certs/{{ prosody_auth_domain_name }}.key

- name: Link auth domain certificate
  ansible.builtin.file:
    state: link
    src: /var/lib/prosody/{{ prosody_auth_domain_name }}.crt
    dest: /etc/prosody/certs/{{ prosody_auth_domain_name }}.crt

- name: Link auth domain certificate into /usr/local/share/ca-certificates
  ansible.builtin.file:
    state: link
    src: /var/lib/prosody/{{ prosody_auth_domain_name }}.crt
    dest: /usr/local/share/ca-certificates/{{ prosody_auth_domain_name }}.crt
  notify: Rebuild ca certificates

- name: Generate prosody-jvb auth domain certificate
  ansible.builtin.command: openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj \
    "/O={{ prosody_domain_name }}/OU={{ ansible_hostname }}/CN={{ prosody_jvb_auth_domain_name }}/
    emailAddress=webmaster@{{ ansible_hostname }}.{{ prosody_domain_name }}" \
    -keyout /var/lib/prosody/{{ prosody_jvb_auth_domain_name }}.key \
    -out /var/lib/prosody/{{ prosody_jvb_auth_domain_name }}.crt
  args:
    creates: /var/lib/prosody/{{ prosody_jvb_auth_domain_name }}.key
  when: prosody_jvb_configure_flag

- name: Link prosody-jvb auth domain keyfile
  ansible.builtin.file:
    state: link
    src: /var/lib/prosody/{{ prosody_jvb_auth_domain_name }}.key
    dest: /etc/prosody/certs/{{ prosody_jvb_auth_domain_name }}.key
  when: prosody_jvb_configure_flag

- name: Link prosody-jvb auth domain certificate
  ansible.builtin.file:
    state: link
    src: /var/lib/prosody/{{ prosody_jvb_auth_domain_name }}.crt
    dest: /etc/prosody/certs/{{ prosody_jvb_auth_domain_name }}.crt
  when: prosody_jvb_configure_flag

- name: Link prosody-jvb auth domain certificate into /usr/local/share/ca-certificates
  ansible.builtin.file:
    state: link
    src: /var/lib/prosody/{{ prosody_jvb_auth_domain_name }}.crt
    dest: /usr/local/share/ca-certificates/{{ prosody_jvb_auth_domain_name }}.crt
  notify: Rebuild ca certificates
  when: prosody_jvb_configure_flag

- name: Install prosody public certificate
  ansible.builtin.copy:
    src: "{{ prosody_ssh_key_crt_local_path }}"
    dest: "/etc/prosody/certs/{{ prosody_domain_name }}.crt"
    mode: 0644
    force: false

- name: Install prosody private certificate
  ansible.builtin.copy:
    src: "{{ prosody_ssh_key_key_local_path }}"
    dest: "/etc/prosody/certs/{{ prosody_domain_name }}.key"
    mode: 0644
    force: false

- name: Install ASAP key
  ansible.builtin.copy:
    dest: "{{ prosody_asap_key_path }}"
    mode: 0644
    content: "{{ asap_key['key'] }}"

- name: Check whether module muc_meeting_id exists
  ansible.builtin.stat:
    path: /usr/share/jitsi-meet/prosody-plugins/mod_muc_meeting_id.lua
  register: muc_meeting_id_exists

- name: Check whether module mod_external_services exists
  ansible.builtin.stat:
    path: /usr/share/jitsi-meet/prosody-plugins/mod_external_services.lua
  register: stat_mod_external_services

- name: Set mod_external_services fact
  ansible.builtin.set_fact:
    mod_external_services_exists: "{{ stat_mod_external_services.stat.exists }}"

- name: Build prosody.cfg.lua from template
  ansible.builtin.template:
    src: prosody.cfg.lua.j2
    dest: /etc/prosody/prosody.cfg.lua
    mode: 0644

- name: Build prosody-jvb.cfg.lua from template
  ansible.builtin.template:
    src: prosody-jvb.cfg.lua.j2
    dest: /etc/prosody-jvb/prosody.cfg.lua
    mode: 0644
  when: prosody_jvb_configure_flag

- name: Register focus prosody user
  ansible.builtin.command: prosodyctl register focus auth.{{ prosody_domain_name }} "{{ prosody_focus_user_secret }}"
  args:
    creates: /var/lib/prosody/auth.{{ prosody_domain_name | replace(".", "%2") }}/accounts/focus.dat

- name: Check whether module mod_roster_command exists
  ansible.builtin.stat:
    path: /usr/share/jitsi-meet/prosody-plugins/mod_roster_command.lua
  register: stat_mod_roster_command

- name: Add client_proxy to jicofo's roster
  ansible.builtin.command: prosodyctl mod_roster_command subscribe "focus.{{ prosody_domain_name }}" "focus@auth.{{ prosody_domain_name }}"
  when:
    - prosody_enable_client_proxy
    - stat_mod_roster_command.stat.exists

- name: Register focus prosody-jvb user
  ansible.builtin.command: |
    prosodyctl --config /etc/prosody-jvb/prosody.cfg.lua register focus {{ prosody_jvb_auth_domain_name }} \
     "{{ prosody_focus_user_secret }}"
  args:
    creates: /var/lib/prosody-jvb/auth.{{ prosody_domain_name | replace(".", "%2") }}/accounts/focus.dat
  when: prosody_jvb_configure_flag

- name: Install muc presence filter pfw rule
  ansible.builtin.template:
    src: "jvb_muc_presence_filter.pfw.j2"
    dest: "/usr/lib/prosody/rules.d/jvb_muc_presence_filter.pfw"
    mode: 0644

# setup visitors prosody
- name: Create the prosody visitor directory
  ansible.builtin.file:
    mode: 0755
    path: "/etc/prosody-v{{ item }}"
    state: directory
  loop: "{{ range(0, prosody_visitors_count | int, 1) | list }}"

- name: Build prosody.cfg.lua from template for visitor
  ansible.builtin.template:
    src: prosody.cfg.lua.visitor.j2
    dest: "/etc/prosody-v{{ item }}/prosody.cfg.lua"
    mode: 0644
  loop: "{{ range(0, prosody_visitors_count | int, 1) | list }}"

- name: Link certs prosody
  ansible.builtin.file:
    state: link
    src: /etc/prosody/certs
    dest: "/etc/prosody-v{{ item }}/certs"
  loop: "{{ range(0, prosody_visitors_count | int, 1) | list }}"

- name: Build systemd unit file for visitor
  ansible.builtin.template:
    mode: 0644
    src: prosody-v.service.j2
    dest: "/lib/systemd/system/prosody-v{{ item }}.service"
  loop: "{{ range(0, prosody_visitors_count | int, 1) | list }}"

- name: Install systemd prosody service overrides directory visitors
  ansible.builtin.file:
    mode: 0755
    path: /etc/systemd/system/prosody-v{{ item }}.service.d
    state: directory
  loop: "{{ range(0, prosody_visitors_count | int, 1) | list }}"

- name: Install systemd prosody visitors service overrides
  ansible.builtin.copy:
    dest: "/etc/systemd/system/prosody-v{{ item }}.service.d/50-accounting.conf"
    mode: 0644
    owner: root
    content: |
      [Service]
      MemoryAccounting=yes
      CPUAccounting=yes
  loop: "{{ range(0, prosody_visitors_count | int, 1) | list }}"

- name: Install systemd daemon-reload for prosody accounting for visitors
  ansible.builtin.systemd:
    daemon_reload: true

- name: Add jicofo user for visitors
  ansible.builtin.command: prosodyctl --config /etc/prosody-v{{ item }}/prosody.cfg.lua register focus auth.meet.jitsi "{{ prosody_focus_user_secret }}"
  args:
    creates: /var/lib/prosody-v{{ item }}/auth%2meet%2jitsi/accounts/focus.dat
  loop: "{{ range(0, prosody_visitors_count | int, 1) | list }}"

- name: Start and enable prosody visitors service
  ansible.builtin.systemd:
    name: "prosody-v{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
    masked: false
  loop: "{{ range(0, prosody_visitors_count | int, 1) | list }}"

- name: Copy over the plugin for muc event reporting
  ansible.builtin.copy:
    src: "mod_muc_events.lua"
    dest: "/usr/lib/prosody/modules/"
    mode: 0644

- name: Copy over the plugin for muc webhooks
  ansible.builtin.copy:
    src: "mod_muc_webhooks.lua"
    dest: "/usr/lib/prosody/modules/"
    mode: 0644

- name: Copy over the plugin for muc moderators
  ansible.builtin.copy:
    src: "mod_muc_moderators.lua"
    dest: "/usr/lib/prosody/modules/"
    mode: 0644

- name: Copy over the plugin for muc vpaas auth
  ansible.builtin.copy:
    src: "mod_muc_auth_vpaas.lua"
    dest: "/usr/lib/prosody/modules/"
    mode: 0644

- name: Copy over the plugin for muc vpaas permissions
  ansible.builtin.copy:
    src: "mod_muc_permissions_vpaas.lua"
    dest: "/usr/lib/prosody/modules/"
    mode: 0644

- name: Copy over the plugin for jigasi invite
  ansible.builtin.copy:
    src: "mod_muc_jigasi_invite.lua"
    dest: "/usr/lib/prosody/modules/"
    mode: 0644

- name: Copy over the util internal lib
  ansible.builtin.copy:
    src: "util.internal.lib.lua"
    dest: "/usr/lib/prosody/modules/"
    mode: 0644

- name: Manage hosts name for the prosody domain {{ prosody_domain_name }}
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: "^{{ item.address }} {{ item.hostname }}$"
    line: "{{ item.address }} {{ item.hostname }}"
    state: present
    backup: true
    insertafter: EOF
  with_items: "{{ prosody_local_domain }}"
  when: prosody_local_domain is defined

- name: Change permissions for the prosody auth domainkey and crt
  ansible.builtin.file:
    dest: "/var/lib/prosody/{{ item }}"
    owner: prosody
    group: prosody
  with_items:
    - "{{ prosody_auth_domain_name }}.key"
    - "{{ prosody_auth_domain_name }}.crt"

- name: Change permissions for the prosody-jvb auth domain key and crt
  ansible.builtin.file:
    dest: "/var/lib/prosody/{{ item }}"
    owner: prosody
    group: prosody
  with_items:
    - "{{ prosody_jvb_auth_domain_name }}.key"
    - "{{ prosody_jvb_auth_domain_name }}.crt"
  when: prosody_jvb_configure_flag

- name: Install prosody-log-filter script
  ansible.builtin.copy:
    src: prosody-log-filter.sh
    dest: /usr/local/bin/prosody-log-filter.sh
    mode: 0755
  when: prosody_enable_log_filter

- name: Install prosody-log-filter service file
  ansible.builtin.copy:
    mode: 0644
    src: prosody-log-filter.systemd
    dest: /lib/systemd/system/prosody-log-filter.service
  when: prosody_enable_log_filter

- name: Start and enable the prosody-log-filter service
  ansible.builtin.systemd:
    name: prosody-log-filter
    state: started
    enabled: true
    daemon_reload: true
  when: prosody_enable_log_filter

- name: Install prosody-jvb-log-filter service file
  ansible.builtin.copy:
    mode: 0644
    src: prosody-jvb-log-filter.systemd
    dest: /lib/systemd/system/prosody-jvb-log-filter.service
  when: prosody_enable_log_filter and prosody_jvb_configure_flag

- name: Start and enable the prosody-jvb-log-filter service
  ansible.builtin.systemd:
    name: prosody-jvb-log-filter
    state: started
    enabled: true
    daemon_reload: true
  when: prosody_enable_log_filter and prosody_jvb_configure_flag

- name: Start and enable prosody service
  ansible.builtin.systemd:
    name: prosody
    state: started
    enabled: true
    daemon_reload: true
    masked: false

- name: Start and enable prosody-jvb service
  ansible.builtin.systemd:
    name: prosody-jvb
    state: started
    enabled: true
    daemon_reload: true
  when: prosody_jvb_configure_flag

- name: Add moderator authentication
  ansible.builtin.command: prosodyctl register {{ moderator_auth_user }} {{ prosody_domain_name }} "{{ moderator_auth_password }}"
  args:
    creates: "{{ moderator_auth_domain_path }}"
  when: prosody_create_users

  # Run the health checker regularly
- name: Enable prosody health check cron
  ansible.builtin.cron:
    user: root
    state: present
    name: "Prosody health check script"
    minute: "*"
    hour: "*"
    job: "/usr/local/bin/prosody-health-check.sh > /tmp/prosody-health-cron-output 2>&1"
  when: prosody_enable_health_check_cron
