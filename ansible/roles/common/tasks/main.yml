---

# Force the locale
- name: Set locale
  ansible.builtin.command: /usr/sbin/update-locale LANG="{{ locale }}" LC_CTYPE="{{ locale }}" LC_ALL="{{ locale }}"
  args:
    creates: /etc/default/locale

# install basic helpful packages
- name: Install some convenient tools
  ansible.builtin.apt:
    name: ['mc', 'htop', 'tmux', 'unzip', 'jq', 'libffi-dev', 'libssl-dev', 'linux-tools-aws', 'acl', 'net-tools', 'sysstat', 'at']
    state: present

- name: Install some convenient tools for python configuration
  ansible.builtin.apt:
    name: ['python-pip', 'python-setuptools']
    state: present
  when: common_install_pip_flag

- name: Install some convenient tools for oracle only
  ansible.builtin.apt:
    name: ['python3-pip', 'python3-setuptools']
    state: present
  when: common_install_pip3_flag

- name: Install setuptools module from pip for focal
  ansible.builtin.pip:
    name: setuptools
    version: "51.3.3"
  when: (ansible_distribution_major_version | int) >= 20

- name: Install pyopenssl==38.0.4 module from pip for focal
  ansible.builtin.pip:
    name: pyopenssl
    version: "22.1.0"
  when: (ansible_distribution_major_version | int) == 20

- name: Install cryptography==38.0.4 module from pip for focal
  ansible.builtin.pip:
    name: cryptography
    version: "38.0.4"
  when: (ansible_distribution_major_version | int) == 20

- name: Install bcrypt module from pip for bionic and below
  ansible.builtin.pip:
    name: bcrypt
    version: "3.1.7"
  when: (ansible_distribution_major_version | int) < 20

- name: Install bcrypt==4.0.1 module from pip for focal
  ansible.builtin.pip:
    name: bcrypt
    version: "4.0.1"
  when: (ansible_distribution_major_version | int) == 20

- name: Install bcrypt module from pip for jammy and above
  ansible.builtin.pip:
    name: bcrypt
  when: (ansible_distribution_major_version | int) > 20

# Get the AWS CLI from pip, latest version is required for lifecycle management, temporary credentials
- name: Install module from pip
  ansible.builtin.pip:
    name: ['awscli', 'boto', 'boto3', 'botocore', 'pyyaml', 'urllib3', 'requests']
    state: present

- name: Install oci module from pip, used later for videobrdige configuration
  ansible.builtin.pip:
    name: ['oci-cli']
    state: present
  when: common_cloud_provider == "oracle"

- name: Set executable bit on pip-installed aws binary
  ansible.builtin.file:
    path: /usr/local/bin/aws
    mode: 0755

- name: Set executable bit on pip-installed oci binary
  ansible.builtin.file:
    path: /usr/local/bin/oci
    mode: 0755

# getaddrinfo configurator
- name: Configure getaddrinfo
  ansible.builtin.template:
    src: gai.conf.j2
    dest: /etc/gai.conf
    mode: 0644
    owner: "root"

# don't run the xapian-index job by default
- name: Remove /etc/cron.weekly/apt-xapian-index
  ansible.builtin.file:
    path: /etc/cron.weekly/apt-xapian-index
    state: absent

# prep ansible install for old installs
- name: Ansible repository install
  ansible.builtin.apt_repository:
    repo: "ppa:ansible/ansible"
    state: present
    update_cache: true
  when: ansible_distribution == 'Ubuntu' and ((ansible_distribution_major_version | int) >= 20)

- name: Install download.sh helper script
  ansible.builtin.copy:
    src: "download.sh"
    dest: "/usr/local/bin/download.sh"
    mode: "0755"

- name: Install aws_cache.sh helper script
  ansible.builtin.copy:
    src: "aws_cache.sh"
    dest: "/usr/local/bin/aws_cache.sh"
    mode: "0755"

- name: Install oracle_cache.sh helper script
  ansible.builtin.copy:
    src: "oracle_cache.sh"
    dest: "/usr/local/bin/oracle_cache.sh"
    mode: "0755"
  when: common_cloud_provider == "oracle"

- name: Install python-dev from apt
  ansible.builtin.apt:
    name: python-dev
    state: present
  when: not common_install_pip3_flag

- name: Install python-dev-is-python3 from apt
  ansible.builtin.apt:
    name: python-dev-is-python3
    state: present
  when:
    - common_install_pip3_flag
    - (ansible_distribution_major_version | int) >= 20

# script to configure the secondary VNIC
- name: Upload configure secondary vnic oracle
  ansible.builtin.copy:
    dest: "/usr/local/bin/secondary_vnic_all_configure_oracle.sh"
    src: "secondary_vnic_all_configure_oracle.sh"
    mode: 0755
    owner: root
  when: common_cloud_provider == "oracle"
