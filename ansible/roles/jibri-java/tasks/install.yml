---
- name: Install additional fonts for jibri rendering
  ansible.builtin.apt:
    name: fonts-noto
    state: present

- name: Autoload aloop module
  ansible.builtin.lineinfile:
    dest: /etc/modules
    line: snd-aloop

- name: Install ffmpeg
  ansible.builtin.apt:
    name: ffmpeg
    state: present

# begin install of intended jvb package
- name: Install jibri package
  ansible.builtin.apt:
    name: "{{ jibri_deb_pkg_name }}={{ jibri_deb_pkg_version }}"
    state: present

# script to handle initial bootup of jibri
- name: Upload jibri boot postinstall scripts aws
  ansible.builtin.copy:
    dest: "/usr/local/bin/postinstall-jibri.sh"
    src: "postinstall-jibri.sh"
    mode: 0755
    owner: root
  when: jibri_cloud_provider == "aws"

- name: Upload jibri boot postinstall scripts oracle
  ansible.builtin.copy:
    dest: "/usr/local/bin/postinstall-jibri.sh"
    src: "postinstall-jibri-oracle.sh"
    mode: 0755
    owner: root
  when: jibri_cloud_provider == "oracle"

# scripts to handle configuration and reconfiguration of jibri
- name: Upload jibri reconfiguration script aws
  ansible.builtin.copy:
    dest: "/usr/local/bin/reconfigure-jibri.sh"
    src: "reconfigure-jibri.sh"
    mode: 0755
    owner: root
  when: jibri_cloud_provider == "aws"

- name: Upload jibri reconfiguration script oracle
  ansible.builtin.copy:
    dest: "/usr/local/bin/reconfigure-jibri.sh"
    src: "reconfigure-jibri-oracle.sh"
    mode: 0755
    owner: root
  when: jibri_cloud_provider == "oracle"

- name: Upload jibri configurator script aws
  ansible.builtin.copy:
    dest: "/usr/local/bin/configure-jibri-local.sh"
    src: "configure-jibri-local.sh"
    mode: 0755
    owner: root
  when: jibri_cloud_provider == "aws"

- name: Upload jibri configurator script oracle
  ansible.builtin.copy:
    dest: "/usr/local/bin/configure-jibri-local.sh"
    src: "configure-jibri-local-oracle.sh"
    mode: 0755
    owner: root
  when: jibri_cloud_provider == "oracle"

# script to handle stats to cloudwatch
- name: Copy status cloudwatch script aws
  ansible.builtin.copy:
    src: "jibri-status.sh"
    dest: "{{ jibri_path_to_status_script }}"
    owner: "{{ jibri_username }}"
    mode: 0755
  when: jibri_cloud_provider == "aws"

  # script to handle health check failures
- name: Copy health check script aws
  ansible.builtin.copy:
    src: "jibri-health.sh"
    dest: "{{ jibri_path_to_health_script }}"
    owner: "{{ jibri_username }}"
    mode: 0755
  when: jibri_cloud_provider == "aws"

  # script to handle health check failures
- name: Copy terminate instance script oracle
  ansible.builtin.template:
    src: "terminate_instance_oracle.j2"
    dest: "{{ jibri_path_to_terminate_instance_script }}"
    owner: "{{ jibri_username }}"
    mode: 0755
  when: jibri_cloud_provider == "oracle"

- name: Copy health check script oracle
  ansible.builtin.template:
    src: "jibri-health-oracle.j2"
    dest: "{{ jibri_path_to_health_script }}"
    owner: "{{ jibri_username }}"
    mode: 0755
  when: jibri_cloud_provider == "oracle"

# script to handle terminating instance graceful shutdown
- name: Copy termination monitor script
  ansible.builtin.template:
    src: "monitor-terminating-instance.j2"
    dest: "{{ jibri_scripts_dir }}/monitor-terminating-instance.sh"
    mode: 0755
  when: jibri_cloud_provider == "aws"

# scripts to handle configuration and reconfiguration of jibri
- name: Copy termination monitor script
  ansible.builtin.copy:
    src: "wait_graceful_shutdown.sh"
    dest: "{{ jibri_scripts_dir }}/wait_graceful_shutdown.sh"
    mode: 0755

# systemd service for monitoring termating instance events
- name: Install JIBRI termination monitoring systemd config
  ansible.builtin.template:
    mode: 0644
    src: monitor-terminating-instance-systemd.j2
    dest: /etc/systemd/system/monitor-terminating-instance.service
  when: jibri_cloud_provider == "aws"

- name: Register installed jibri version
  ansible.builtin.shell: |
    set -o pipefail
    {{ jibri_service_version_shell }}
  args:
    executable: /bin/bash
  register: jibri_version_shell
  when: jibri_cloud_provider == "aws"
