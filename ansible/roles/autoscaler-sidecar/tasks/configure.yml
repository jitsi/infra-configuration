---
- name: Register installed sidecar software version
  ansible.builtin.command: "{{ autoscaler_sidecar_instance_version_command }}"
  register: autoscaler_sidecar_instance_version_shell
  when: (autoscaler_sidecar_instance_version_command | length) > 0

- name: Set autoscaler instance version fact
  ansible.builtin.set_fact:
    autoscaler_sidecar_instance_version: "{{ autoscaler_sidecar_instance_version_shell.stdout }}"
  when: autoscaler_sidecar_instance_version_shell is defined

- name: Copy autoscaler signing key file
  ansible.builtin.copy:
    dest: "{{ autoscaler_key_path }}"
    mode: 0640
    content: "{{ asap_key['key'] }}"
    owner: "{{ autoscaler_username }}"

- name: Sidecar environment configuration
  ansible.builtin.template:
    mode: 0640
    src: sidecar.env.j2
    dest: "{{ autoscaler_env_path }}"

- name: Allow jsidecar users any sudo commands
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: "^%{{ autoscaler_groupname }}"
    line: "%{{ autoscaler_groupname }} ALL=(ALL) NOPASSWD: ALL"

- name: Copy graceful shutdown wrapper script
  ansible.builtin.template:
    dest: "{{ autoscaler_graceful_shutdown_wrapper }}"
    src: "graceful_shutdown_wrapper.sh.j2"
    mode: 0755

- name: Copy reconfigure wrapper script
  ansible.builtin.template:
    dest: "{{ autoscaler_reconfigure_wrapper }}"
    src: "reconfigure_wrapper.sh.j2"
    mode: 0755

- name: Copy terminate instance script aws
  ansible.builtin.copy:
    dest: "{{ autoscaler_terminate_script }}"
    src: "terminate_instance_aws.sh"
    mode: 0755
  when: autoscaler_cloud_provider == "aws"

- name: Copy terminate instance script oracle
  ansible.builtin.copy:
    dest: "{{ autoscaler_terminate_script }}"
    src: "terminate_instance_oracle.sh"
    mode: 0755
  when: autoscaler_cloud_provider == "oracle" and autoscaler_use_default_terminate_script

- name: Configure systemd script for sidecar service
  ansible.builtin.template:
    mode: 0644
    src: sidecar.systemd.j2
    dest: "/lib/systemd/system/{{ autoscaler_sidecar_service_name }}.service"

- name: Start server service and set it enabled
  ansible.builtin.service:
    name: "{{ autoscaler_sidecar_service_name }}"
    state: started
    enabled: true

- name: Create directory for AWS credentials
  ansible.builtin.file:
    mode: 0750
    path: "{{ autoscaler_user.homedir }}/.aws"
    state: directory
  when: autoscaler_cloud_provider == "oracle" and jvb_ddns_cleanup_flag

- name: AWS credentials
  ansible.builtin.template:
    src: aws_credentials.j2
    dest: "{{ autoscaler_user.homedir }}/.aws/credentials"
    mode: 0640
    owner: "{{ autoscaler_username }}"
  when: autoscaler_cloud_provider == "oracle" and jvb_ddns_cleanup_flag

# Run the the health checker regularly
- name: Sidecar health check script cron
  ansible.builtin.cron:
    user: root
    state: present
    name: "Sidecar health check script"
    minute: "*"
    hour: "*"
    job: "{{ autoscaler_health_script }} > /tmp/health-sidecar-cron-output 2>&1"
