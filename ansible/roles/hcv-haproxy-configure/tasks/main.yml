---
- name: Register installed haproxy version # noqa no-changed-when
  ansible.builtin.shell: |
    set -o pipefail
    dpkg -l haproxy | tail -1 | awk '{print $3}'| cut -d'.' -f1,2
  args:
    executable: /bin/bash
  register: haproxy_installed_version_shell

- name: Set haproxy installed videbridge variables
  ansible.builtin.set_fact:
    haproxy_installed_version: "{{ haproxy_installed_version_shell.stdout }}"

- name: Set tcp memory
  ansible.posix.sysctl:
    name: net.ipv4.tcp_mem
    value: "786432 1697152 1945728"
    sysctl_set: true
    state: present
    reload: true
  when: haproxy_build_ami or not haproxy_configure_only

- name: Set tcp read buffer
  ansible.posix.sysctl:
    name: net.ipv4.tcp_rmem
    value: "10240 87380 12582912"
    sysctl_set: true
    state: present
    reload: true
  when: haproxy_build_ami or not haproxy_configure_only

- name: Set tcp write buffer
  ansible.posix.sysctl:
    name: net.ipv4.tcp_wmem
    value: "10240 87380 12582912"
    sysctl_set: true
    state: present
    reload: true
  when: haproxy_build_ami or not haproxy_configure_only

- name: Set tcp backlog buffer max
  ansible.posix.sysctl:
    name: net.core.netdev_max_backlog
    value: "10000"
    state: present
    sysctl_set: true
    reload: true
  when: haproxy_build_ami or not haproxy_configure_only

- name: Set local port range
  ansible.posix.sysctl:
    name: net.ipv4.ip_local_port_range
    value: "10240 65535"
    state: present
    sysctl_set: true
    reload: true
  when: haproxy_build_ami or not haproxy_configure_only

- name: Set kernel file-max
  ansible.posix.sysctl:
    name: fs.file-max
    value: "10000000"
    state: present
    sysctl_set: true
    reload: true
  when: haproxy_build_ami or not haproxy_configure_only

- name: Set kernel file-max
  ansible.posix.sysctl:
    name: fs.nr_open
    value: "10000000"
    state: present
    sysctl_set: true
    reload: true
  when: haproxy_build_ami or not haproxy_configure_only


- name: Copy configure-haproxy.sh
  ansible.builtin.copy:
    dest: "/usr/local/bin/configure-haproxy.sh"
    src: "configure-haproxy.sh"
    mode: 0755
    owner: root
  when:
    - haproxy_build_ami or not haproxy_configure_only
    - haproxy_cloud_provider == 'aws'

- name: Copy configure-haproxy.sh
  ansible.builtin.copy:
    dest: "/usr/local/bin/configure-haproxy.sh"
    src: "configure-haproxy-oracle.sh"
    mode: 0755
    owner: root
  when:
    - haproxy_cloud_provider == 'oracle'

- name: Copy hook-boot-haproxy.sh
  ansible.builtin.copy:
    dest: "/usr/local/bin/hook-boot-haproxy.sh"
    src: "hook-boot-haproxy.sh"
    mode: 0755
    owner: root
  when: haproxy_build_ami or not haproxy_configure_only

- name: Copy hook-configure-haproxy.sh
  ansible.builtin.copy:
    dest: "/usr/local/bin/hook-configure-haproxy.sh"
    src: "hook-configure-haproxy.sh"
    mode: 0755
    owner: root
  when: haproxy_build_ami or not haproxy_configure_only

- name: HAProxy file open limits
  ansible.builtin.copy:
    mode: 0644
    dest: "/etc/security/limits.d/haproxy.conf"
    content: "haproxy - nofile 10000000\nroot - nofile 10000000"
  when: haproxy_build_ami or not haproxy_configure_only

- name: PAM common session applies limits # noqa no-tabs
  ansible.builtin.lineinfile:
    dest: /etc/pam.d/common-session
    line: "session required\tpam_limits.so"
  when: haproxy_build_ami or not haproxy_configure_only

- name: PAM common noninteractive-session applies limits # noqa no-tabs
  ansible.builtin.lineinfile:
    dest: /etc/pam.d/common-session-noninteractive
    line: "session required\tpam_limits.so"
  when: haproxy_build_ami or not haproxy_configure_only

# set the systemd limits for open files
- name: Set systemd DefaultLimitNOFILE
  ansible.builtin.lineinfile:
    path: /etc/systemd/system.conf
    line: "DefaultLimitNOFILE=10000000"
    regexp: "DefaultLimitNOFILE="
  when: haproxy_build_ami or not haproxy_configure_only

# set the systemd limits for open files
- name: Set systemd user DefaultLimitNOFILE
  ansible.builtin.lineinfile:
    path: /etc/systemd/user.conf
    line: "DefaultLimitNOFILE=10000000"
    regexp: "DefaultLimitNOFILE="
  when: haproxy_build_ami or not haproxy_configure_only

- name: Copy file with region list
  ansible.builtin.copy:
    mode: 0644
    dest: "/etc/regions.txt"
    content: "{{ haproxy_regions }}"
  when: not haproxy_build_ami

- name: Ensure custom facts directory exists
  ansible.builtin.file:
    mode: 0755
    path: /etc/ansible/facts.d
    recurse: true
    state: directory
  when: not haproxy_build_ami and not haproxy_configure_only

- name: Remove custom facts for haproxy
  ansible.builtin.file:
    path: /etc/ansible/facts.d/configure_haproxy.fact
    state: absent

- name: Check CPU count
  ansible.builtin.shell: |
    set -o pipefail
    lscpu | grep "CPU(s):" | head -1 | awk '{print $2}'
  args:
    executable: /bin/bash
  register: cpu_count
  when: not haproxy_build_ami

- name: Set process count fact
  ansible.builtin.set_fact:
    ansible_processor_vcpus: "{{ cpu_count.stdout | int }}"
  when: not haproxy_build_ami

- name: Create haproxy map directory
  ansible.builtin.file:
    state: directory
    path: /etc/haproxy/maps
    mode: 0755

# if the health map file already exists, use the value in it
- name: Check health map file presence
  ansible.builtin.stat:
    path: "{{ haproxy_health_up_map_path }}"
  register: health_map_stat

- name: Pull health map file value
  ansible.builtin.shell: |
    set -o pipefail
    grep up {{ haproxy_health_up_map_path }} | cut -d ' ' -f2
  args:
    executable: /bin/bash
  ignore_errors: true
  register: health_map_result
  when: health_map_stat.stat.exists

# if the map is found, use the value within
- name: Set haproxy_health_up_map_value from existing file
  ansible.builtin.set_fact:
    haproxy_health_up_map_value: "{{ health_map_result.stdout | from_json }}"
  when:
    - health_map_stat.stat.exists
    - not health_map_result.failed

- name: Write health map file with haproxy_health_up_map_value
  ansible.builtin.copy:
    mode: 0644
    dest: "{{ haproxy_health_up_map_path }}"
    content: "up {{ haproxy_health_up_map_value | to_json }}"

- name: Change haproxy default config
  ansible.builtin.template:
    src: haproxy_default.j2
    dest: '{{ haproxy_default_conf_path }}/haproxy'
    mode: "0644"
  notify:
    - Restart haproxy systemd
  when:
    - not haproxy_build_ami
    - not haproxy_configure_only

- name: Change haproxy systemd service script
  ansible.builtin.template:
    src: haproxy.service.j2
    dest: '{{ haproxy_systemd_path }}'
    mode: "0755"
  notify:
    - Reload haproxy systemd
  when:
    - not haproxy_build_ami
    - not haproxy_configure_only

- name: Install haproxy update from map script for consul-templat
  ansible.builtin.copy:
    mode: 0744
    src: update-haproxy-map.sh
    dest: /usr/local/bin/update-haproxy-map.sh

- name: Install haproxy config checker script for consul-template
  ansible.builtin.copy:
    mode: 0744
    src: check-install-haproxy-config.sh
    dest: /usr/local/bin/check-install-haproxy-config.sh

- name: Install oci lb backend drain script
  ansible.builtin.copy:
    mode: 0755
    src: oci-lb-backend-drain.sh
    dest: /usr/local/bin/oci-lb-backend-drain.sh

- name: Install haproxy config install script
  ansible.builtin.copy:
    mode: 0755
    src: check-install-haproxy-config.sh
    dest: /usr/local/bin/check-install-haproxy-config.sh

- name: Install haproxy configurator
  ansible.builtin.copy:
    mode: 0755
    src: haproxy-configurator.sh
    dest: /usr/local/bin/haproxy-configurator.sh

- name: Install haproxy configurator payload
  ansible.builtin.copy:
    mode: 0755
    src: haproxy-configurator-payload.sh
    dest: /usr/local/bin/haproxy-configurator-payload.sh

- name: Install check peer mesh script
  ansible.builtin.copy:
    mode: 0755
    src: check-peer-mesh.sh
    dest: /usr/local/bin/check-peer-mesh.sh
