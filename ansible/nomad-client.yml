---
- name: Main
  hosts: all
  gather_facts: true
  become_user: root
  become: true
  vars_files:
    - secrets/ssh-users.yml
    - secrets/wavefront.yml
    - secrets/consul.yml
    - secrets/asap-keys.yml
    - secrets/nomad.yml
    - secrets/oci-logging.yml
    - secrets/oci-certificates.yml
    - secrets/carbon-black.yml
    - secrets/ops-repo.yml
    - secrets/repo.yml
    - config/vars.yml
    - sites/{{ hcv_environment }}/vars.yml
  vars:
    nomad_enable_jitsi_autoscaler: false
    nvidia_docker_flag: false
    cloud_provider: oracle
    cloud_instance_id: "{{ ansible_fqdn }}"
    shard_role: nomad-pool
    nomad_node_role: client
    nomad_gpu_count: 0
    nomad_node_class: "{{ nomad_pool_type }}"
    nomad_meta:
      environment: "{{ hcv_environment }}"
      cloud_name: "{{ cloud_name }}"
      cloud_instance_id: "{{ cloud_instance_id }}"
      cloud_region: "{{ oracle_region }}"
      pool_type: "{{ nomad_pool_type }}"
      gpu_count: "{{ nomad_gpu_count }}"
      public_ip: "{{ cloud_public_ip }}"
      availability_domain: "{{ cloud_availability_domain }}"
      fault_domain: "{{ cloud_fault_domain }}"
    rsyslog_tcp_output_enabled: true
  pre_tasks:
    - name: Stop telegraf for nomad clients # noqa ignore-errors
      ansible.builtin.service:
        name: telegraf
        state: stopped
        enabled: false
      ignore_errors: true
    - name: Get instance's VNIC
      ansible.builtin.uri:
        url: http://169.254.169.254/opc/v1/vnics/
      register: vnic_result
      tags: setup
    - name: Set JVB Vnic variable
      ansible.builtin.set_fact:
        jvb_vnic: "{{ vnic_result.json[0].vnicId }}"
      tags: setup
    - name: Get instance's details
      ansible.builtin.uri:
        url: http://169.254.169.254/opc/v1/instance/
      register: instance_result
      tags: setup
    - name: Set nomad instance variables
      ansible.builtin.set_fact:
        cloud_instance_id: "{{ instance_result.json.id }}"
        nomad_shape: "{{ instance_result.json.shape }}"
        cloud_availability_domain: "{{ instance_result.json.ociAdName }}"
        cloud_fault_domain: "{{ instance_result.json.faultDomain }}"
      tags: setup
    - name: Calculate nomad cpu_total_compute
      ansible.builtin.shell: |
        set -o pipefail
        echo $(( $(dmidecode -t 4 | grep 'Current Speed:' | awk '{print $3}') * $(cat /proc/cpuinfo | grep 'processor' | wc -l) ))
      args:
        executable: /bin/bash
      register: cpu_total_compute_result
      tags: setup
      when: nomad_shape == "VM.Standard.A1.Flex"
    - name: Set nomad cpu_total_compute fact
      ansible.builtin.set_fact:
        nomad_cpu_total_compute: "{{ cpu_total_compute_result.stdout }}"
      tags: setup
      when: nomad_shape == "VM.Standard.A1.Flex"
    - name: Get instance's Public IP from VNIC
      ansible.builtin.command: "oci network vnic get --vnic-id {{ jvb_vnic }} --auth instance_principal"
      register: vnic_details_result
      tags: setup
    - name: Set cloud IP variable
      ansible.builtin.set_fact:
        cloud_public_ip: "{{ (vnic_details_result.stdout | from_json).data['public-ip'] }}"
      tags: setup
    - name: Update apt-cache
      ansible.builtin.apt:
        update_cache: true
# ASAP keys
    - name: Create asap key dir
      ansible.builtin.file:
        path: "{{ asap_key_dir }}"
        state: directory
        recurse: true
        mode: 0755
      tags: setup
    - name: Copy asap dev key to the asap folder
      ansible.builtin.copy:
        mode: 0644
        content: "{{ asap_key_dev.key }}"
        dest: "{{ asap_key_dir }}/dev.key"
      tags: setup
    - name: Copy asap stage key to the asap folder
      ansible.builtin.copy:
        mode: 0644
        content: "{{ asap_key_stage.key }}"
        dest: "{{ asap_key_dir }}/stage.key"
      tags: setup
    - name: Copy asap prod key to the asap folder
      ansible.builtin.copy:
        mode: 0644
        content: "{{ asap_key_prod.key }}"
        dest: "{{ asap_key_dir }}/prod.key"
      tags: setup
# OCI credentials
    - name: Create oci cert dir
      ansible.builtin.file:
        path: "/opt/jitsi/certs"
        state: directory
        recurse: true
        mode: 0755
      tags: setup
    - name: Copy OCI cert
      ansible.builtin.copy:
        mode: 0644
        content: "{{ oci_api_key_pem }}"
        dest: "/opt/jitsi/certs/oci_api_key.pem"
      tags: setup

  roles:
    - { role: "iptables-serf", tags: "iptables-serf"}
    - { role: "iptables-nomad", tags: "iptables-nomad"}
    - { role: "logrotate", tags: "logrotate"}
    - { role: "journald", tags: "journald"}
    - { role: "rsyslog", tags: "rsyslog", rsyslog_tcp_output_enabled: true}
    - { role: "fluentd-jitsi", tags: "fluentd", fluentd_install_flag: false, fluentd_configure_flag: true, when: nomad_enable_fluentd }
    - { role: "autoscaler-sidecar", tags: "autoscaler-sidecar",
        autoscaler_instance_type: "nomad", cloud_provider: "oracle", autoscaler_install_flag: false, autoscaler_configure_flag: true, when: nomad_enable_jitsi_autoscaler}
    - { role: "consul-agent", tags: "consul", consul_install_flag: false}
    - { role: "nvidia-docker", tags: "nvidia-docker", when: nvidia_docker_flag }
    - { role: "nomad-jitsi", tags: "nomad-jitsi" }
    - { role: "gpu-models", tags: "gpu-models", when: nvidia_docker_flag }
    - { role: "nomad", tags: "nomad", nomad_install_flag: false }
    - { role: "carbon-black", tags: "carbon-black", when: production_env_flag}
  tasks:
    - name: Consul service enablement
      ansible.builtin.systemd:
        name: consul
        state: started
        enabled: true
    - name: Start nomad
      ansible.builtin.service:
        name: nomad
        state: started
        enabled: true
